
LAB2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  00000b16  00000baa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b16  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000016  00800122  00800122  00000bcc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000bcc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000bfc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00000c3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011f9  00000000  00000000  00000d1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000092f  00000000  00000000  00001f15  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000966  00000000  00000000  00002844  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000200  00000000  00000000  000031ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000543  00000000  00000000  000033ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000075d  00000000  00000000  000038ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  0000404c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 21 03 	jmp	0x642	; 0x642 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 ec 02 	jmp	0x5d8	; 0x5d8 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e1       	ldi	r30, 0x16	; 22
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 32       	cpi	r26, 0x22	; 34
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e2       	ldi	r26, 0x22	; 34
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 33       	cpi	r26, 0x38	; 56
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 9c 02 	call	0x538	; 0x538 <main>
  9e:	0c 94 89 05 	jmp	0xb12	; 0xb12 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initADC>:
 */ 
#include "ADC.h"

void initADC(){
	
	ADMUX = 0;
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	10 82       	st	Z, r1
	DIDR0 |= (1 <<ADC0D);	//desabilitar el A0 como digital
  ac:	ae e7       	ldi	r26, 0x7E	; 126
  ae:	b0 e0       	ldi	r27, 0x00	; 0
  b0:	8c 91       	ld	r24, X
  b2:	81 60       	ori	r24, 0x01	; 1
  b4:	8c 93       	st	X, r24
	DIDR0 |= (1<<ADC1D);     //desabilitar el A1 como digital
  b6:	8c 91       	ld	r24, X
  b8:	82 60       	ori	r24, 0x02	; 2
  ba:	8c 93       	st	X, r24


	//JUSTIFICACION IZQUIERDA
	ADMUX |= (1<<ADLAR);
  bc:	80 81       	ld	r24, Z
  be:	80 62       	ori	r24, 0x20	; 32
  c0:	80 83       	st	Z, r24
	//REFERENCIA INTERNA
	ADMUX |= (1<<REFS0);
  c2:	80 81       	ld	r24, Z
  c4:	80 64       	ori	r24, 0x40	; 64
  c6:	80 83       	st	Z, r24
	ADMUX &= ~(1 << REFS1);
  c8:	80 81       	ld	r24, Z
  ca:	8f 77       	andi	r24, 0x7F	; 127
  cc:	80 83       	st	Z, r24
	// HABILITAR INTERRUPCION
	ADCSRA |= (1<<ADIE);
  ce:	ea e7       	ldi	r30, 0x7A	; 122
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	88 60       	ori	r24, 0x08	; 8
  d6:	80 83       	st	Z, r24
	//PRESCALER 128
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);  //Habilitando prescaler de 16M/128 frecuencia = 125Khz
  d8:	80 81       	ld	r24, Z
  da:	87 60       	ori	r24, 0x07	; 7
  dc:	80 83       	st	Z, r24
	//HABILITAR ADC
	ADCSRA |= (1<<ADEN);
  de:	80 81       	ld	r24, Z
  e0:	80 68       	ori	r24, 0x80	; 128
  e2:	80 83       	st	Z, r24
  e4:	08 95       	ret

000000e6 <dato_a_mostrar>:
}


void dato_a_mostrar(char a)
{
	if(a & 1)				//0000 0001, el  a&1 es una operación bitwise, si el primer bit menos signfiativo es 1, la condición es verdadera
  e6:	80 ff       	sbrs	r24, 0
  e8:	04 c0       	rjmp	.+8      	; 0xf2 <dato_a_mostrar+0xc>
	PORTB |= (1<<2);
  ea:	95 b1       	in	r25, 0x05	; 5
  ec:	94 60       	ori	r25, 0x04	; 4
  ee:	95 b9       	out	0x05, r25	; 5
  f0:	03 c0       	rjmp	.+6      	; 0xf8 <dato_a_mostrar+0x12>
	else
	PORTB &= ~(1<<2);
  f2:	95 b1       	in	r25, 0x05	; 5
  f4:	9b 7f       	andi	r25, 0xFB	; 251
  f6:	95 b9       	out	0x05, r25	; 5
	
	if(a & 2)			   //0000 0010, ahora verifica el segundo bit menos significativo, y si es 1, la condición es verdadera
  f8:	81 ff       	sbrs	r24, 1
  fa:	04 c0       	rjmp	.+8      	; 0x104 <dato_a_mostrar+0x1e>
	PORTB |= (1<<3);
  fc:	95 b1       	in	r25, 0x05	; 5
  fe:	98 60       	ori	r25, 0x08	; 8
 100:	95 b9       	out	0x05, r25	; 5
 102:	03 c0       	rjmp	.+6      	; 0x10a <dato_a_mostrar+0x24>
	else
	PORTB &= ~(1<<3);
 104:	95 b1       	in	r25, 0x05	; 5
 106:	97 7f       	andi	r25, 0xF7	; 247
 108:	95 b9       	out	0x05, r25	; 5
	
	if(a & 4)				//0000 0100
 10a:	82 ff       	sbrs	r24, 2
 10c:	04 c0       	rjmp	.+8      	; 0x116 <dato_a_mostrar+0x30>
	PORTD |= (1<<PORTD2);
 10e:	9b b1       	in	r25, 0x0b	; 11
 110:	94 60       	ori	r25, 0x04	; 4
 112:	9b b9       	out	0x0b, r25	; 11
 114:	03 c0       	rjmp	.+6      	; 0x11c <dato_a_mostrar+0x36>
	else
	PORTD &= ~(1<<PORTD2);
 116:	9b b1       	in	r25, 0x0b	; 11
 118:	9b 7f       	andi	r25, 0xFB	; 251
 11a:	9b b9       	out	0x0b, r25	; 11
	
	if(a & 8)				//0000 1000
 11c:	83 ff       	sbrs	r24, 3
 11e:	04 c0       	rjmp	.+8      	; 0x128 <dato_a_mostrar+0x42>
	PORTD |= (1<<PORTD3);
 120:	9b b1       	in	r25, 0x0b	; 11
 122:	98 60       	ori	r25, 0x08	; 8
 124:	9b b9       	out	0x0b, r25	; 11
 126:	03 c0       	rjmp	.+6      	; 0x12e <dato_a_mostrar+0x48>
	else
	PORTD &= ~(1<<PORTD3);
 128:	9b b1       	in	r25, 0x0b	; 11
 12a:	97 7f       	andi	r25, 0xF7	; 247
 12c:	9b b9       	out	0x0b, r25	; 11
	
	if(a & 16)			    //0001 0000
 12e:	84 ff       	sbrs	r24, 4
 130:	04 c0       	rjmp	.+8      	; 0x13a <dato_a_mostrar+0x54>
	PORTD |= (1<<PORTD4);
 132:	9b b1       	in	r25, 0x0b	; 11
 134:	90 61       	ori	r25, 0x10	; 16
 136:	9b b9       	out	0x0b, r25	; 11
 138:	03 c0       	rjmp	.+6      	; 0x140 <dato_a_mostrar+0x5a>
	else
	PORTD &= ~(1<<PORTD4);
 13a:	9b b1       	in	r25, 0x0b	; 11
 13c:	9f 7e       	andi	r25, 0xEF	; 239
 13e:	9b b9       	out	0x0b, r25	; 11

	if(a & 32)			    //0010 0000
 140:	85 ff       	sbrs	r24, 5
 142:	04 c0       	rjmp	.+8      	; 0x14c <dato_a_mostrar+0x66>
	PORTD |= (1<<PORTD5);
 144:	9b b1       	in	r25, 0x0b	; 11
 146:	90 62       	ori	r25, 0x20	; 32
 148:	9b b9       	out	0x0b, r25	; 11
 14a:	03 c0       	rjmp	.+6      	; 0x152 <dato_a_mostrar+0x6c>
	else
	PORTD &= ~(1<<PORTD5);
 14c:	9b b1       	in	r25, 0x0b	; 11
 14e:	9f 7d       	andi	r25, 0xDF	; 223
 150:	9b b9       	out	0x0b, r25	; 11
	
	if(a & 64)			   //0100 0000
 152:	86 ff       	sbrs	r24, 6
 154:	04 c0       	rjmp	.+8      	; 0x15e <dato_a_mostrar+0x78>
	PORTD |= (1<<PORTD6);
 156:	9b b1       	in	r25, 0x0b	; 11
 158:	90 64       	ori	r25, 0x40	; 64
 15a:	9b b9       	out	0x0b, r25	; 11
 15c:	03 c0       	rjmp	.+6      	; 0x164 <dato_a_mostrar+0x7e>
	else
	PORTD &= ~(1<<PORTD6);
 15e:	9b b1       	in	r25, 0x0b	; 11
 160:	9f 7b       	andi	r25, 0xBF	; 191
 162:	9b b9       	out	0x0b, r25	; 11
	
	if(a & 128)			   //1000 0000
 164:	88 23       	and	r24, r24
 166:	24 f4       	brge	.+8      	; 0x170 <dato_a_mostrar+0x8a>
	PORTD |= (1<<PORTD7);
 168:	8b b1       	in	r24, 0x0b	; 11
 16a:	80 68       	ori	r24, 0x80	; 128
 16c:	8b b9       	out	0x0b, r24	; 11
 16e:	08 95       	ret
	else
	PORTD &= ~(1<<PORTD7);
 170:	8b b1       	in	r24, 0x0b	; 11
 172:	8f 77       	andi	r24, 0x7F	; 127
 174:	8b b9       	out	0x0b, r24	; 11
 176:	08 95       	ret

00000178 <inicio>:
	inicio(0x06);  //Comando que indica el fabricante del LCD, comenzar a almacenar en DDRAM
}

void inicio(char a)
{
	PORTB &= ~(1<<PORTB0);  //RS = 0, se le indica que es modo comando
 178:	95 b1       	in	r25, 0x05	; 5
 17a:	9e 7f       	andi	r25, 0xFE	; 254
 17c:	95 b9       	out	0x05, r25	; 5
	dato_a_mostrar(a);
 17e:	0e 94 73 00 	call	0xe6	; 0xe6 <dato_a_mostrar>
	PORTB |= (1<<PORTB1);    // E = 1, se le indica que envie los datos
 182:	85 b1       	in	r24, 0x05	; 5
 184:	82 60       	ori	r24, 0x02	; 2
 186:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 188:	8f e9       	ldi	r24, 0x9F	; 159
 18a:	9f e0       	ldi	r25, 0x0F	; 15
 18c:	01 97       	sbiw	r24, 0x01	; 1
 18e:	f1 f7       	brne	.-4      	; 0x18c <inicio+0x14>
 190:	00 c0       	rjmp	.+0      	; 0x192 <inicio+0x1a>
 192:	00 00       	nop
	_delay_ms(1);
	PORTB &= ~(1<<PORTB1);   // E = 0,  se le indica que se cierra el envio de datos
 194:	85 b1       	in	r24, 0x05	; 5
 196:	8d 7f       	andi	r24, 0xFD	; 253
 198:	85 b9       	out	0x05, r24	; 5
 19a:	8f e9       	ldi	r24, 0x9F	; 159
 19c:	9f e0       	ldi	r25, 0x0F	; 15
 19e:	01 97       	sbiw	r24, 0x01	; 1
 1a0:	f1 f7       	brne	.-4      	; 0x19e <inicio+0x26>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <inicio+0x2c>
 1a4:	00 00       	nop
 1a6:	08 95       	ret

000001a8 <Lcd_Init8bits>:
 *  Author: alane
 */ 
#include "LCD8bits.h"
void Lcd_Init8bits()
{
	PORTB &= ~(1<<PORTB0);   //RS = 0, se le indica que es modo comando
 1a8:	85 b1       	in	r24, 0x05	; 5
 1aa:	8e 7f       	andi	r24, 0xFE	; 254
 1ac:	85 b9       	out	0x05, r24	; 5
	PORTB &= ~(1<<PORTB1);   //E = 0
 1ae:	85 b1       	in	r24, 0x05	; 5
 1b0:	8d 7f       	andi	r24, 0xFD	; 253
 1b2:	85 b9       	out	0x05, r24	; 5
 1b4:	2f ef       	ldi	r18, 0xFF	; 255
 1b6:	89 ef       	ldi	r24, 0xF9	; 249
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	21 50       	subi	r18, 0x01	; 1
 1bc:	80 40       	sbci	r24, 0x00	; 0
 1be:	90 40       	sbci	r25, 0x00	; 0
 1c0:	e1 f7       	brne	.-8      	; 0x1ba <Lcd_Init8bits+0x12>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <Lcd_Init8bits+0x1c>
 1c4:	00 00       	nop
	_delay_ms(20);     //Pequeños delay que indica el fabricante del LCD
	inicio(0x30);     //Comando que se repite 3 veces, que indica el fabricante de la LCD
 1c6:	80 e3       	ldi	r24, 0x30	; 48
 1c8:	0e 94 bc 00 	call	0x178	; 0x178 <inicio>
 1cc:	8f e1       	ldi	r24, 0x1F	; 31
 1ce:	9e e4       	ldi	r25, 0x4E	; 78
 1d0:	01 97       	sbiw	r24, 0x01	; 1
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <Lcd_Init8bits+0x28>
 1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <Lcd_Init8bits+0x2e>
 1d6:	00 00       	nop
	_delay_ms(5);
	inicio(0x30);
 1d8:	80 e3       	ldi	r24, 0x30	; 48
 1da:	0e 94 bc 00 	call	0x178	; 0x178 <inicio>
 1de:	8f e1       	ldi	r24, 0x1F	; 31
 1e0:	9e e4       	ldi	r25, 0x4E	; 78
 1e2:	01 97       	sbiw	r24, 0x01	; 1
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <Lcd_Init8bits+0x3a>
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <Lcd_Init8bits+0x40>
 1e8:	00 00       	nop
	_delay_ms(5);
	inicio(0x30);
 1ea:	80 e3       	ldi	r24, 0x30	; 48
 1ec:	0e 94 bc 00 	call	0x178	; 0x178 <inicio>
 1f0:	8f e3       	ldi	r24, 0x3F	; 63
 1f2:	9c e9       	ldi	r25, 0x9C	; 156
 1f4:	01 97       	sbiw	r24, 0x01	; 1
 1f6:	f1 f7       	brne	.-4      	; 0x1f4 <Lcd_Init8bits+0x4c>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <Lcd_Init8bits+0x52>
 1fa:	00 00       	nop
	_delay_ms(10);

	inicio(0x38);  //Comando que indica el fabricante del LCD, usando la matriz de 5X8
 1fc:	88 e3       	ldi	r24, 0x38	; 56
 1fe:	0e 94 bc 00 	call	0x178	; 0x178 <inicio>
	inicio(0x0C);  //Comando que indica el fabricante del LCD, display encendido
 202:	8c e0       	ldi	r24, 0x0C	; 12
 204:	0e 94 bc 00 	call	0x178	; 0x178 <inicio>
	inicio(0x01);  //Comando que indica el fabricante del LCD, Limpiar LCD
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	0e 94 bc 00 	call	0x178	; 0x178 <inicio>
	inicio(0x06);  //Comando que indica el fabricante del LCD, comenzar a almacenar en DDRAM
 20e:	86 e0       	ldi	r24, 0x06	; 6
 210:	0e 94 bc 00 	call	0x178	; 0x178 <inicio>
 214:	08 95       	ret

00000216 <Lcd_Clear>:



void Lcd_Clear()    //Limpia la pantalla LCD
{
	inicio(1);  //Comando dado por el fabricante de la LCD
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	0e 94 bc 00 	call	0x178	; 0x178 <inicio>
 21c:	08 95       	ret

0000021e <Lcd_Set_Cursor>:



void Lcd_Set_Cursor(char a, char b)
{
	if(a == 0)
 21e:	81 11       	cpse	r24, r1
 220:	05 c0       	rjmp	.+10     	; 0x22c <Lcd_Set_Cursor+0xe>
	inicio(0x80 + b);  //Posicionarse en la linea 1 y se suma la columna
 222:	80 e8       	ldi	r24, 0x80	; 128
 224:	86 0f       	add	r24, r22
 226:	0e 94 bc 00 	call	0x178	; 0x178 <inicio>
 22a:	08 95       	ret
	
	else if(a == 1)
 22c:	81 30       	cpi	r24, 0x01	; 1
 22e:	21 f4       	brne	.+8      	; 0x238 <Lcd_Set_Cursor+0x1a>
	inicio(0xC0 + b);  //Posicionarse en la linea 2  y se suma la columna
 230:	80 ec       	ldi	r24, 0xC0	; 192
 232:	86 0f       	add	r24, r22
 234:	0e 94 bc 00 	call	0x178	; 0x178 <inicio>
 238:	08 95       	ret

0000023a <Lcd_Write_Char>:
}


void Lcd_Write_Char(char data)
{
	PORTB |= (1<<PORTB0);        // RS = 1, se le indica que esta en modo caracter
 23a:	95 b1       	in	r25, 0x05	; 5
 23c:	91 60       	ori	r25, 0x01	; 1
 23e:	95 b9       	out	0x05, r25	; 5
	dato_a_mostrar(data);             //Escribir el caracter
 240:	0e 94 73 00 	call	0xe6	; 0xe6 <dato_a_mostrar>
	PORTB |= (1<<PORTB1);       // E = 1, enviar el dato
 244:	85 b1       	in	r24, 0x05	; 5
 246:	82 60       	ori	r24, 0x02	; 2
 248:	85 b9       	out	0x05, r24	; 5
 24a:	8f e9       	ldi	r24, 0x9F	; 159
 24c:	9f e0       	ldi	r25, 0x0F	; 15
 24e:	01 97       	sbiw	r24, 0x01	; 1
 250:	f1 f7       	brne	.-4      	; 0x24e <Lcd_Write_Char+0x14>
 252:	00 c0       	rjmp	.+0      	; 0x254 <Lcd_Write_Char+0x1a>
 254:	00 00       	nop
	_delay_ms(1);
	PORTB &= ~(1<<PORTB1);    // E = 0
 256:	85 b1       	in	r24, 0x05	; 5
 258:	8d 7f       	andi	r24, 0xFD	; 253
 25a:	85 b9       	out	0x05, r24	; 5
 25c:	8f e9       	ldi	r24, 0x9F	; 159
 25e:	9f e0       	ldi	r25, 0x0F	; 15
 260:	01 97       	sbiw	r24, 0x01	; 1
 262:	f1 f7       	brne	.-4      	; 0x260 <Lcd_Write_Char+0x26>
 264:	00 c0       	rjmp	.+0      	; 0x266 <Lcd_Write_Char+0x2c>
 266:	00 00       	nop
 268:	08 95       	ret

0000026a <Lcd_Write_String>:
	_delay_ms(1);
}


void Lcd_Write_String(char *a) //Usando punteros, ya que, estos almacenan por ejemplo *dato = hola\0, al final siempre llevan un caracter nulo
{
 26a:	0f 93       	push	r16
 26c:	1f 93       	push	r17
 26e:	cf 93       	push	r28
 270:	df 93       	push	r29
 272:	8c 01       	movw	r16, r24
	int i;
	for(i=0; a[i]!='\0'; i++)   //Se recorre todo el puntero, hasta que el valor sea nulo
 274:	c0 e0       	ldi	r28, 0x00	; 0
 276:	d0 e0       	ldi	r29, 0x00	; 0
 278:	03 c0       	rjmp	.+6      	; 0x280 <Lcd_Write_String+0x16>
	Lcd_Write_Char(a[i]);
 27a:	0e 94 1d 01 	call	0x23a	; 0x23a <Lcd_Write_Char>


void Lcd_Write_String(char *a) //Usando punteros, ya que, estos almacenan por ejemplo *dato = hola\0, al final siempre llevan un caracter nulo
{
	int i;
	for(i=0; a[i]!='\0'; i++)   //Se recorre todo el puntero, hasta que el valor sea nulo
 27e:	21 96       	adiw	r28, 0x01	; 1
 280:	f8 01       	movw	r30, r16
 282:	ec 0f       	add	r30, r28
 284:	fd 1f       	adc	r31, r29
 286:	80 81       	ld	r24, Z
 288:	81 11       	cpse	r24, r1
 28a:	f7 cf       	rjmp	.-18     	; 0x27a <Lcd_Write_String+0x10>
	Lcd_Write_Char(a[i]);
}
 28c:	df 91       	pop	r29
 28e:	cf 91       	pop	r28
 290:	1f 91       	pop	r17
 292:	0f 91       	pop	r16
 294:	08 95       	ret

00000296 <setup>:
void actualizarLista(char *lista, int valor);
void actualizarLCD(void);

// Configuración inicial del sistema
void setup(void) {
	cli();  // Deshabilitar interrupciones globales
 296:	f8 94       	cli
	DDRD = 0xFC;  // Puerto D como salida
 298:	8c ef       	ldi	r24, 0xFC	; 252
 29a:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0xFF;  // Puerto B como salida
 29c:	8f ef       	ldi	r24, 0xFF	; 255
 29e:	84 b9       	out	0x04, r24	; 4
	DDRC = 0;     // Puerto C como entrada
 2a0:	17 b8       	out	0x07, r1	; 7
	
	// Configuración UART
	UBRR0H = (BRC >> 8);  // Configurar baud rate alto
 2a2:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = BRC;         // Configurar baud rate bajo
 2a6:	87 e6       	ldi	r24, 0x67	; 103
 2a8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B = (1 << TXEN0) | (1 << RXEN0) | (1 << RXCIE0); // Habilitar transmisión, recepción e interrupción RX
 2ac:	88 e9       	ldi	r24, 0x98	; 152
 2ae:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00); // Configurar formato: 8 bits de datos, 1 bit de parada
 2b2:	86 e0       	ldi	r24, 0x06	; 6
 2b4:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	
	Lcd_Init8bits();  // Inicializar pantalla LCD
 2b8:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <Lcd_Init8bits>
 2bc:	2f ef       	ldi	r18, 0xFF	; 255
 2be:	80 e7       	ldi	r24, 0x70	; 112
 2c0:	92 e0       	ldi	r25, 0x02	; 2
 2c2:	21 50       	subi	r18, 0x01	; 1
 2c4:	80 40       	sbci	r24, 0x00	; 0
 2c6:	90 40       	sbci	r25, 0x00	; 0
 2c8:	e1 f7       	brne	.-8      	; 0x2c2 <setup+0x2c>
 2ca:	00 c0       	rjmp	.+0      	; 0x2cc <setup+0x36>
 2cc:	00 00       	nop
	_delay_ms(50);    // Esperar para asegurarse de que la LCD se inicialice correctamente
	Lcd_Clear();      // Limpiar pantalla LCD
 2ce:	0e 94 0b 01 	call	0x216	; 0x216 <Lcd_Clear>
	initADC();  // Inicializar ADC
 2d2:	0e 94 53 00 	call	0xa6	; 0xa6 <initADC>
	ADCSRA |= (1 << ADSC);  // Iniciar la primera conversión ADC
 2d6:	ea e7       	ldi	r30, 0x7A	; 122
 2d8:	f0 e0       	ldi	r31, 0x00	; 0
 2da:	80 81       	ld	r24, Z
 2dc:	80 64       	ori	r24, 0x40	; 64
 2de:	80 83       	st	Z, r24

	sei();  // Habilitar interrupciones globales
 2e0:	78 94       	sei
 2e2:	08 95       	ret

000002e4 <actualizarVoltaje>:
}

// Función para convertir un valor ADC a voltaje y actualizar una cadena
void actualizarVoltaje(char *lista, uint8_t valor) {
 2e4:	8f 92       	push	r8
 2e6:	9f 92       	push	r9
 2e8:	af 92       	push	r10
 2ea:	bf 92       	push	r11
 2ec:	cf 92       	push	r12
 2ee:	df 92       	push	r13
 2f0:	ef 92       	push	r14
 2f2:	ff 92       	push	r15
 2f4:	0f 93       	push	r16
 2f6:	1f 93       	push	r17
 2f8:	cf 93       	push	r28
 2fa:	df 93       	push	r29
 2fc:	ec 01       	movw	r28, r24
	float voltaje = (valor * 5.0) / 255.0;
 2fe:	70 e0       	ldi	r23, 0x00	; 0
 300:	80 e0       	ldi	r24, 0x00	; 0
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	0e 94 59 04 	call	0x8b2	; 0x8b2 <__floatsisf>
 308:	20 e0       	ldi	r18, 0x00	; 0
 30a:	30 e0       	ldi	r19, 0x00	; 0
 30c:	40 ea       	ldi	r20, 0xA0	; 160
 30e:	50 e4       	ldi	r21, 0x40	; 64
 310:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__mulsf3>
 314:	20 e0       	ldi	r18, 0x00	; 0
 316:	30 e0       	ldi	r19, 0x00	; 0
 318:	4f e7       	ldi	r20, 0x7F	; 127
 31a:	53 e4       	ldi	r21, 0x43	; 67
 31c:	0e 94 b6 03 	call	0x76c	; 0x76c <__divsf3>
 320:	4b 01       	movw	r8, r22
 322:	5c 01       	movw	r10, r24
	uint16_t int_part = (uint16_t)voltaje;
 324:	0e 94 28 04 	call	0x850	; 0x850 <__fixunssfsi>
 328:	6b 01       	movw	r12, r22
 32a:	7c 01       	movw	r14, r24
 32c:	8b 01       	movw	r16, r22
	uint16_t dec_part = (uint16_t)((voltaje - int_part) * 100);  // Dos decimales
 32e:	80 e0       	ldi	r24, 0x00	; 0
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	0e 94 57 04 	call	0x8ae	; 0x8ae <__floatunsisf>
 336:	9b 01       	movw	r18, r22
 338:	ac 01       	movw	r20, r24
 33a:	c5 01       	movw	r24, r10
 33c:	b4 01       	movw	r22, r8
 33e:	0e 94 49 03 	call	0x692	; 0x692 <__subsf3>
 342:	20 e0       	ldi	r18, 0x00	; 0
 344:	30 e0       	ldi	r19, 0x00	; 0
 346:	48 ec       	ldi	r20, 0xC8	; 200
 348:	52 e4       	ldi	r21, 0x42	; 66
 34a:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__mulsf3>
 34e:	0e 94 28 04 	call	0x850	; 0x850 <__fixunssfsi>
 352:	4b 01       	movw	r8, r22
 354:	5c 01       	movw	r10, r24

	if (int_part < 10) {
 356:	0a 30       	cpi	r16, 0x0A	; 10
 358:	11 05       	cpc	r17, r1
 35a:	40 f5       	brcc	.+80     	; 0x3ac <actualizarVoltaje+0xc8>
		lista[0] = '0' + int_part;
 35c:	80 e3       	ldi	r24, 0x30	; 48
 35e:	8c 0d       	add	r24, r12
 360:	88 83       	st	Y, r24
		lista[1] = '.';
 362:	8e e2       	ldi	r24, 0x2E	; 46
 364:	89 83       	std	Y+1, r24	; 0x01
		lista[2] = '0' + (dec_part / 10);
 366:	94 01       	movw	r18, r8
 368:	ad ec       	ldi	r26, 0xCD	; 205
 36a:	bc ec       	ldi	r27, 0xCC	; 204
 36c:	0e 94 66 05 	call	0xacc	; 0xacc <__umulhisi3>
 370:	ac 01       	movw	r20, r24
 372:	56 95       	lsr	r21
 374:	47 95       	ror	r20
 376:	56 95       	lsr	r21
 378:	47 95       	ror	r20
 37a:	56 95       	lsr	r21
 37c:	47 95       	ror	r20
 37e:	80 e3       	ldi	r24, 0x30	; 48
 380:	84 0f       	add	r24, r20
 382:	8a 83       	std	Y+2, r24	; 0x02
		lista[3] = '0' + (dec_part % 10);
 384:	ca 01       	movw	r24, r20
 386:	88 0f       	add	r24, r24
 388:	99 1f       	adc	r25, r25
 38a:	44 0f       	add	r20, r20
 38c:	55 1f       	adc	r21, r21
 38e:	44 0f       	add	r20, r20
 390:	55 1f       	adc	r21, r21
 392:	44 0f       	add	r20, r20
 394:	55 1f       	adc	r21, r21
 396:	48 0f       	add	r20, r24
 398:	59 1f       	adc	r21, r25
 39a:	c4 01       	movw	r24, r8
 39c:	84 1b       	sub	r24, r20
 39e:	95 0b       	sbc	r25, r21
 3a0:	80 5d       	subi	r24, 0xD0	; 208
 3a2:	8b 83       	std	Y+3, r24	; 0x03
		lista[4] = 'V';
 3a4:	86 e5       	ldi	r24, 0x56	; 86
 3a6:	8c 83       	std	Y+4, r24	; 0x04
		lista[5] = '\0';
 3a8:	1d 82       	std	Y+5, r1	; 0x05
 3aa:	41 c0       	rjmp	.+130    	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
		} else {
		lista[0] = '0' + (int_part / 10);
 3ac:	96 01       	movw	r18, r12
 3ae:	ad ec       	ldi	r26, 0xCD	; 205
 3b0:	bc ec       	ldi	r27, 0xCC	; 204
 3b2:	0e 94 66 05 	call	0xacc	; 0xacc <__umulhisi3>
 3b6:	ac 01       	movw	r20, r24
 3b8:	56 95       	lsr	r21
 3ba:	47 95       	ror	r20
 3bc:	56 95       	lsr	r21
 3be:	47 95       	ror	r20
 3c0:	56 95       	lsr	r21
 3c2:	47 95       	ror	r20
 3c4:	80 e3       	ldi	r24, 0x30	; 48
 3c6:	84 0f       	add	r24, r20
 3c8:	88 83       	st	Y, r24
		lista[1] = '0' + (int_part % 10);
 3ca:	ca 01       	movw	r24, r20
 3cc:	88 0f       	add	r24, r24
 3ce:	99 1f       	adc	r25, r25
 3d0:	44 0f       	add	r20, r20
 3d2:	55 1f       	adc	r21, r21
 3d4:	44 0f       	add	r20, r20
 3d6:	55 1f       	adc	r21, r21
 3d8:	44 0f       	add	r20, r20
 3da:	55 1f       	adc	r21, r21
 3dc:	48 0f       	add	r20, r24
 3de:	59 1f       	adc	r21, r25
 3e0:	c6 01       	movw	r24, r12
 3e2:	84 1b       	sub	r24, r20
 3e4:	95 0b       	sbc	r25, r21
 3e6:	80 5d       	subi	r24, 0xD0	; 208
 3e8:	89 83       	std	Y+1, r24	; 0x01
		lista[2] = '.';
 3ea:	8e e2       	ldi	r24, 0x2E	; 46
 3ec:	8a 83       	std	Y+2, r24	; 0x02
		lista[3] = '0' + (dec_part / 10);
 3ee:	94 01       	movw	r18, r8
 3f0:	0e 94 66 05 	call	0xacc	; 0xacc <__umulhisi3>
 3f4:	ac 01       	movw	r20, r24
 3f6:	56 95       	lsr	r21
 3f8:	47 95       	ror	r20
 3fa:	56 95       	lsr	r21
 3fc:	47 95       	ror	r20
 3fe:	56 95       	lsr	r21
 400:	47 95       	ror	r20
 402:	80 e3       	ldi	r24, 0x30	; 48
 404:	84 0f       	add	r24, r20
 406:	8b 83       	std	Y+3, r24	; 0x03
		lista[4] = '0' + (dec_part % 10);
 408:	ca 01       	movw	r24, r20
 40a:	88 0f       	add	r24, r24
 40c:	99 1f       	adc	r25, r25
 40e:	44 0f       	add	r20, r20
 410:	55 1f       	adc	r21, r21
 412:	44 0f       	add	r20, r20
 414:	55 1f       	adc	r21, r21
 416:	44 0f       	add	r20, r20
 418:	55 1f       	adc	r21, r21
 41a:	48 0f       	add	r20, r24
 41c:	59 1f       	adc	r21, r25
 41e:	c4 01       	movw	r24, r8
 420:	84 1b       	sub	r24, r20
 422:	95 0b       	sbc	r25, r21
 424:	80 5d       	subi	r24, 0xD0	; 208
 426:	8c 83       	std	Y+4, r24	; 0x04
		lista[5] = 'V';
 428:	86 e5       	ldi	r24, 0x56	; 86
 42a:	8d 83       	std	Y+5, r24	; 0x05
		lista[6] = '\0';
 42c:	1e 82       	std	Y+6, r1	; 0x06
	}
}
 42e:	df 91       	pop	r29
 430:	cf 91       	pop	r28
 432:	1f 91       	pop	r17
 434:	0f 91       	pop	r16
 436:	ff 90       	pop	r15
 438:	ef 90       	pop	r14
 43a:	df 90       	pop	r13
 43c:	cf 90       	pop	r12
 43e:	bf 90       	pop	r11
 440:	af 90       	pop	r10
 442:	9f 90       	pop	r9
 444:	8f 90       	pop	r8
 446:	08 95       	ret

00000448 <actualizarLista>:

// Función para actualizar una cadena con un valor de 3 dígitos
void actualizarLista(char *lista, int valor) {
 448:	cf 93       	push	r28
 44a:	df 93       	push	r29
 44c:	fc 01       	movw	r30, r24
 44e:	9b 01       	movw	r18, r22
	lista[0] = '0' + (valor / 100);
 450:	cb 01       	movw	r24, r22
 452:	64 e6       	ldi	r22, 0x64	; 100
 454:	70 e0       	ldi	r23, 0x00	; 0
 456:	0e 94 52 05 	call	0xaa4	; 0xaa4 <__divmodhi4>
 45a:	60 5d       	subi	r22, 0xD0	; 208
 45c:	60 83       	st	Z, r22
	lista[1] = '0' + ((valor / 10) % 10);
 45e:	ca e0       	ldi	r28, 0x0A	; 10
 460:	d0 e0       	ldi	r29, 0x00	; 0
 462:	c9 01       	movw	r24, r18
 464:	be 01       	movw	r22, r28
 466:	0e 94 52 05 	call	0xaa4	; 0xaa4 <__divmodhi4>
 46a:	28 2f       	mov	r18, r24
 46c:	cb 01       	movw	r24, r22
 46e:	be 01       	movw	r22, r28
 470:	0e 94 52 05 	call	0xaa4	; 0xaa4 <__divmodhi4>
 474:	80 5d       	subi	r24, 0xD0	; 208
 476:	81 83       	std	Z+1, r24	; 0x01
	lista[2] = '0' + (valor % 10);
 478:	20 5d       	subi	r18, 0xD0	; 208
 47a:	22 83       	std	Z+2, r18	; 0x02
	lista[3] = '\0';
 47c:	13 82       	std	Z+3, r1	; 0x03
}
 47e:	df 91       	pop	r29
 480:	cf 91       	pop	r28
 482:	08 95       	ret

00000484 <enviarUART>:

// Función para enviar un dato por UART
void enviarUART(char data) {
	while (!(UCSR0A & (1 << UDRE0)));  // Esperar a que el buffer esté vacío
 484:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 488:	95 ff       	sbrs	r25, 5
 48a:	fc cf       	rjmp	.-8      	; 0x484 <enviarUART>
	UDR0 = data;  // Enviar dato
 48c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 490:	08 95       	ret

00000492 <enviarStringUART>:
}

// Función para enviar una cadena de caracteres por UART
void enviarStringUART(char* str) {
 492:	cf 93       	push	r28
 494:	df 93       	push	r29
 496:	ec 01       	movw	r28, r24
	while(*str) {
 498:	03 c0       	rjmp	.+6      	; 0x4a0 <enviarStringUART+0xe>
		enviarUART(*str++);
 49a:	21 96       	adiw	r28, 0x01	; 1
 49c:	0e 94 42 02 	call	0x484	; 0x484 <enviarUART>
	UDR0 = data;  // Enviar dato
}

// Función para enviar una cadena de caracteres por UART
void enviarStringUART(char* str) {
	while(*str) {
 4a0:	88 81       	ld	r24, Y
 4a2:	81 11       	cpse	r24, r1
 4a4:	fa cf       	rjmp	.-12     	; 0x49a <enviarStringUART+0x8>
		enviarUART(*str++);
	}
}
 4a6:	df 91       	pop	r29
 4a8:	cf 91       	pop	r28
 4aa:	08 95       	ret

000004ac <actualizarLCD>:

// Función para actualizar la pantalla LCD
void actualizarLCD(void) {
	Lcd_Clear();  // Limpiar pantalla
 4ac:	0e 94 0b 01 	call	0x216	; 0x216 <Lcd_Clear>
	Lcd_Set_Cursor(0, 1);
 4b0:	61 e0       	ldi	r22, 0x01	; 1
 4b2:	80 e0       	ldi	r24, 0x00	; 0
 4b4:	0e 94 0f 01 	call	0x21e	; 0x21e <Lcd_Set_Cursor>
	Lcd_Write_String("S1:");  // Escribir etiqueta de Sensor 1
 4b8:	84 e0       	ldi	r24, 0x04	; 4
 4ba:	91 e0       	ldi	r25, 0x01	; 1
 4bc:	0e 94 35 01 	call	0x26a	; 0x26a <Lcd_Write_String>
	Lcd_Set_Cursor(0, 7);
 4c0:	67 e0       	ldi	r22, 0x07	; 7
 4c2:	80 e0       	ldi	r24, 0x00	; 0
 4c4:	0e 94 0f 01 	call	0x21e	; 0x21e <Lcd_Set_Cursor>
	Lcd_Write_String("S2:");  // Escribir etiqueta de Sensor 2
 4c8:	88 e0       	ldi	r24, 0x08	; 8
 4ca:	91 e0       	ldi	r25, 0x01	; 1
 4cc:	0e 94 35 01 	call	0x26a	; 0x26a <Lcd_Write_String>
	Lcd_Set_Cursor(0, 13);
 4d0:	6d e0       	ldi	r22, 0x0D	; 13
 4d2:	80 e0       	ldi	r24, 0x00	; 0
 4d4:	0e 94 0f 01 	call	0x21e	; 0x21e <Lcd_Set_Cursor>
	Lcd_Write_String("S3:");  // Escribir etiqueta de Sensor 3
 4d8:	8c e0       	ldi	r24, 0x0C	; 12
 4da:	91 e0       	ldi	r25, 0x01	; 1
 4dc:	0e 94 35 01 	call	0x26a	; 0x26a <Lcd_Write_String>
	
	// Actualizar las cadenas con los valores actuales
	actualizarVoltaje(lista1, Val1);
 4e0:	60 91 27 01 	lds	r22, 0x0127	; 0x800127 <Val1>
 4e4:	88 e2       	ldi	r24, 0x28	; 40
 4e6:	91 e0       	ldi	r25, 0x01	; 1
 4e8:	0e 94 72 01 	call	0x2e4	; 0x2e4 <actualizarVoltaje>
	actualizarVoltaje(lista2, Val2);
 4ec:	60 91 26 01 	lds	r22, 0x0126	; 0x800126 <Val2>
 4f0:	80 e3       	ldi	r24, 0x30	; 48
 4f2:	91 e0       	ldi	r25, 0x01	; 1
 4f4:	0e 94 72 01 	call	0x2e4	; 0x2e4 <actualizarVoltaje>
	actualizarLista(lista3, contador);
 4f8:	60 91 24 01 	lds	r22, 0x0124	; 0x800124 <contador>
 4fc:	70 e0       	ldi	r23, 0x00	; 0
 4fe:	80 e0       	ldi	r24, 0x00	; 0
 500:	91 e0       	ldi	r25, 0x01	; 1
 502:	0e 94 24 02 	call	0x448	; 0x448 <actualizarLista>

	// Mostrar los valores en la LCD
	Lcd_Set_Cursor(1, 1);
 506:	61 e0       	ldi	r22, 0x01	; 1
 508:	81 e0       	ldi	r24, 0x01	; 1
 50a:	0e 94 0f 01 	call	0x21e	; 0x21e <Lcd_Set_Cursor>
	Lcd_Write_String(lista1);
 50e:	88 e2       	ldi	r24, 0x28	; 40
 510:	91 e0       	ldi	r25, 0x01	; 1
 512:	0e 94 35 01 	call	0x26a	; 0x26a <Lcd_Write_String>
	Lcd_Set_Cursor(1, 7);
 516:	67 e0       	ldi	r22, 0x07	; 7
 518:	81 e0       	ldi	r24, 0x01	; 1
 51a:	0e 94 0f 01 	call	0x21e	; 0x21e <Lcd_Set_Cursor>
	Lcd_Write_String(lista2);
 51e:	80 e3       	ldi	r24, 0x30	; 48
 520:	91 e0       	ldi	r25, 0x01	; 1
 522:	0e 94 35 01 	call	0x26a	; 0x26a <Lcd_Write_String>
	Lcd_Set_Cursor(1, 13);
 526:	6d e0       	ldi	r22, 0x0D	; 13
 528:	81 e0       	ldi	r24, 0x01	; 1
 52a:	0e 94 0f 01 	call	0x21e	; 0x21e <Lcd_Set_Cursor>
	Lcd_Write_String(lista3);
 52e:	80 e0       	ldi	r24, 0x00	; 0
 530:	91 e0       	ldi	r25, 0x01	; 1
 532:	0e 94 35 01 	call	0x26a	; 0x26a <Lcd_Write_String>
 536:	08 95       	ret

00000538 <main>:
}

// Función principal
int main(void) {
	setup();  // Configuración inicial del sistema
 538:	0e 94 4b 01 	call	0x296	; 0x296 <setup>
	
	// Variables para guardar los valores anteriores
	uint8_t prevVal1 = 255, prevVal2 = 255, prevContador = 255;
 53c:	1f ef       	ldi	r17, 0xFF	; 255
 53e:	df ef       	ldi	r29, 0xFF	; 255
 540:	cf ef       	ldi	r28, 0xFF	; 255

	while (1) {
		// Verificar si hay cambios en los valores del ADC o el contador
		if ((Val1 != prevVal1) || (Val2 != prevVal2) || (contador != prevContador) || updateLCD) {
 542:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <Val1>
 546:	c8 13       	cpse	r28, r24
 548:	0c c0       	rjmp	.+24     	; 0x562 <main+0x2a>
 54a:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <Val2>
 54e:	d8 13       	cpse	r29, r24
 550:	08 c0       	rjmp	.+16     	; 0x562 <main+0x2a>
 552:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <contador>
 556:	18 13       	cpse	r17, r24
 558:	04 c0       	rjmp	.+8      	; 0x562 <main+0x2a>
 55a:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <updateLCD>
 55e:	88 23       	and	r24, r24
 560:	39 f1       	breq	.+78     	; 0x5b0 <main+0x78>
			actualizarLCD();  // Actualizar la pantalla LCD
 562:	0e 94 56 02 	call	0x4ac	; 0x4ac <actualizarLCD>
			// Enviar los valores actuales por UART
			enviarStringUART("S1: ");
 566:	80 e1       	ldi	r24, 0x10	; 16
 568:	91 e0       	ldi	r25, 0x01	; 1
 56a:	0e 94 49 02 	call	0x492	; 0x492 <enviarStringUART>
			enviarStringUART(lista1);
 56e:	88 e2       	ldi	r24, 0x28	; 40
 570:	91 e0       	ldi	r25, 0x01	; 1
 572:	0e 94 49 02 	call	0x492	; 0x492 <enviarStringUART>
			enviarStringUART(" S2: ");
 576:	85 e1       	ldi	r24, 0x15	; 21
 578:	91 e0       	ldi	r25, 0x01	; 1
 57a:	0e 94 49 02 	call	0x492	; 0x492 <enviarStringUART>
			enviarStringUART(lista2);
 57e:	80 e3       	ldi	r24, 0x30	; 48
 580:	91 e0       	ldi	r25, 0x01	; 1
 582:	0e 94 49 02 	call	0x492	; 0x492 <enviarStringUART>
			enviarStringUART(" S3: ");
 586:	8b e1       	ldi	r24, 0x1B	; 27
 588:	91 e0       	ldi	r25, 0x01	; 1
 58a:	0e 94 49 02 	call	0x492	; 0x492 <enviarStringUART>
			enviarStringUART(lista3);
 58e:	80 e0       	ldi	r24, 0x00	; 0
 590:	91 e0       	ldi	r25, 0x01	; 1
 592:	0e 94 49 02 	call	0x492	; 0x492 <enviarStringUART>
			enviarUART('\n');
 596:	8a e0       	ldi	r24, 0x0A	; 10
 598:	0e 94 42 02 	call	0x484	; 0x484 <enviarUART>
			// Guardar los valores actuales como anteriores
			prevVal1 = Val1;
 59c:	c0 91 27 01 	lds	r28, 0x0127	; 0x800127 <Val1>
			prevVal2 = Val2;
 5a0:	d0 91 26 01 	lds	r29, 0x0126	; 0x800126 <Val2>
			prevContador = contador;
 5a4:	10 91 24 01 	lds	r17, 0x0124	; 0x800124 <contador>
			adcUpdated = 0;
 5a8:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <__data_end>
			updateLCD = 0;
 5ac:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <updateLCD>
		}

		// Actualizar las cadenas con los valores actuales
		actualizarVoltaje(lista1, Val1);
 5b0:	60 91 27 01 	lds	r22, 0x0127	; 0x800127 <Val1>
 5b4:	88 e2       	ldi	r24, 0x28	; 40
 5b6:	91 e0       	ldi	r25, 0x01	; 1
 5b8:	0e 94 72 01 	call	0x2e4	; 0x2e4 <actualizarVoltaje>
		actualizarVoltaje(lista2, Val2);
 5bc:	60 91 26 01 	lds	r22, 0x0126	; 0x800126 <Val2>
 5c0:	80 e3       	ldi	r24, 0x30	; 48
 5c2:	91 e0       	ldi	r25, 0x01	; 1
 5c4:	0e 94 72 01 	call	0x2e4	; 0x2e4 <actualizarVoltaje>
		actualizarLista(lista3, contador);
 5c8:	60 91 24 01 	lds	r22, 0x0124	; 0x800124 <contador>
 5cc:	70 e0       	ldi	r23, 0x00	; 0
 5ce:	80 e0       	ldi	r24, 0x00	; 0
 5d0:	91 e0       	ldi	r25, 0x01	; 1
 5d2:	0e 94 24 02 	call	0x448	; 0x448 <actualizarLista>

		
		//_delay_ms(100);  // Esperar 100ms
	}
 5d6:	b5 cf       	rjmp	.-150    	; 0x542 <main+0xa>

000005d8 <__vector_21>:
	
}

// Interrupción del ADC
ISR(ADC_vect) {
 5d8:	1f 92       	push	r1
 5da:	0f 92       	push	r0
 5dc:	0f b6       	in	r0, 0x3f	; 63
 5de:	0f 92       	push	r0
 5e0:	11 24       	eor	r1, r1
 5e2:	8f 93       	push	r24
 5e4:	ef 93       	push	r30
 5e6:	ff 93       	push	r31
	if (caso == 0) {
 5e8:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <caso>
 5ec:	81 11       	cpse	r24, r1
 5ee:	0d c0       	rjmp	.+26     	; 0x60a <__vector_21+0x32>
		ADMUX &= ~((1 << MUX2) | (1 << MUX1) | (1 << MUX0)); // Seleccionar canal ADC0
 5f0:	ec e7       	ldi	r30, 0x7C	; 124
 5f2:	f0 e0       	ldi	r31, 0x00	; 0
 5f4:	80 81       	ld	r24, Z
 5f6:	88 7f       	andi	r24, 0xF8	; 248
 5f8:	80 83       	st	Z, r24
		Val1 = ADCH;  // Leer valor alto del ADC
 5fa:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 5fe:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <Val1>
		caso = 1;  // Cambiar a caso 1
 602:	81 e0       	ldi	r24, 0x01	; 1
 604:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <caso>
 608:	0c c0       	rjmp	.+24     	; 0x622 <__vector_21+0x4a>
		} else {
		ADMUX = (ADMUX & ~((1 << MUX2) | (1 << MUX1) | (1 << MUX0))) | (1 << MUX0); // Seleccionar canal ADC1
 60a:	ec e7       	ldi	r30, 0x7C	; 124
 60c:	f0 e0       	ldi	r31, 0x00	; 0
 60e:	80 81       	ld	r24, Z
 610:	88 7f       	andi	r24, 0xF8	; 248
 612:	81 60       	ori	r24, 0x01	; 1
 614:	80 83       	st	Z, r24
		Val2 = ADCH;  // Leer valor alto del ADC
 616:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 61a:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <Val2>
		caso = 0;  // Cambiar a caso 0
 61e:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <caso>
	}
	ADCSRA |= (1 << ADSC);  // Iniciar la próxima conversión ADC
 622:	ea e7       	ldi	r30, 0x7A	; 122
 624:	f0 e0       	ldi	r31, 0x00	; 0
 626:	80 81       	ld	r24, Z
 628:	80 64       	ori	r24, 0x40	; 64
 62a:	80 83       	st	Z, r24
	adcUpdated = 1; // Indicar que se debe actualizar la LCD
 62c:	81 e0       	ldi	r24, 0x01	; 1
 62e:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <__data_end>
}
 632:	ff 91       	pop	r31
 634:	ef 91       	pop	r30
 636:	8f 91       	pop	r24
 638:	0f 90       	pop	r0
 63a:	0f be       	out	0x3f, r0	; 63
 63c:	0f 90       	pop	r0
 63e:	1f 90       	pop	r1
 640:	18 95       	reti

00000642 <__vector_18>:

// Interrupción UART para recibir datos
ISR(USART_RX_vect) {
 642:	1f 92       	push	r1
 644:	0f 92       	push	r0
 646:	0f b6       	in	r0, 0x3f	; 63
 648:	0f 92       	push	r0
 64a:	11 24       	eor	r1, r1
 64c:	8f 93       	push	r24
	char received = UDR0;  // Leer dato recibido
 64e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	if (received == '+') {
 652:	8b 32       	cpi	r24, 0x2B	; 43
 654:	51 f4       	brne	.+20     	; 0x66a <__vector_18+0x28>
		if (contador < 255) {
 656:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <contador>
 65a:	8f 3f       	cpi	r24, 0xFF	; 255
 65c:	89 f0       	breq	.+34     	; 0x680 <__vector_18+0x3e>
			contador++;  // Incrementar contador si es menor a 255
 65e:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <contador>
 662:	8f 5f       	subi	r24, 0xFF	; 255
 664:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <contador>
 668:	0b c0       	rjmp	.+22     	; 0x680 <__vector_18+0x3e>
		}
		} else if (received == '-') {
 66a:	8d 32       	cpi	r24, 0x2D	; 45
 66c:	49 f4       	brne	.+18     	; 0x680 <__vector_18+0x3e>
		if (contador > 0) {
 66e:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <contador>
 672:	88 23       	and	r24, r24
 674:	29 f0       	breq	.+10     	; 0x680 <__vector_18+0x3e>
			contador--;  // Decrementar contador si es mayor a 0
 676:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <contador>
 67a:	81 50       	subi	r24, 0x01	; 1
 67c:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <contador>
		}
	}
	updateLCD = 1; // Indicar que se debe actualizar la LCD
 680:	81 e0       	ldi	r24, 0x01	; 1
 682:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <updateLCD>
}
 686:	8f 91       	pop	r24
 688:	0f 90       	pop	r0
 68a:	0f be       	out	0x3f, r0	; 63
 68c:	0f 90       	pop	r0
 68e:	1f 90       	pop	r1
 690:	18 95       	reti

00000692 <__subsf3>:
 692:	50 58       	subi	r21, 0x80	; 128

00000694 <__addsf3>:
 694:	bb 27       	eor	r27, r27
 696:	aa 27       	eor	r26, r26
 698:	0e 94 61 03 	call	0x6c2	; 0x6c2 <__addsf3x>
 69c:	0c 94 ab 04 	jmp	0x956	; 0x956 <__fp_round>
 6a0:	0e 94 9d 04 	call	0x93a	; 0x93a <__fp_pscA>
 6a4:	38 f0       	brcs	.+14     	; 0x6b4 <__addsf3+0x20>
 6a6:	0e 94 a4 04 	call	0x948	; 0x948 <__fp_pscB>
 6aa:	20 f0       	brcs	.+8      	; 0x6b4 <__addsf3+0x20>
 6ac:	39 f4       	brne	.+14     	; 0x6bc <__addsf3+0x28>
 6ae:	9f 3f       	cpi	r25, 0xFF	; 255
 6b0:	19 f4       	brne	.+6      	; 0x6b8 <__addsf3+0x24>
 6b2:	26 f4       	brtc	.+8      	; 0x6bc <__addsf3+0x28>
 6b4:	0c 94 9a 04 	jmp	0x934	; 0x934 <__fp_nan>
 6b8:	0e f4       	brtc	.+2      	; 0x6bc <__addsf3+0x28>
 6ba:	e0 95       	com	r30
 6bc:	e7 fb       	bst	r30, 7
 6be:	0c 94 94 04 	jmp	0x928	; 0x928 <__fp_inf>

000006c2 <__addsf3x>:
 6c2:	e9 2f       	mov	r30, r25
 6c4:	0e 94 bc 04 	call	0x978	; 0x978 <__fp_split3>
 6c8:	58 f3       	brcs	.-42     	; 0x6a0 <__addsf3+0xc>
 6ca:	ba 17       	cp	r27, r26
 6cc:	62 07       	cpc	r22, r18
 6ce:	73 07       	cpc	r23, r19
 6d0:	84 07       	cpc	r24, r20
 6d2:	95 07       	cpc	r25, r21
 6d4:	20 f0       	brcs	.+8      	; 0x6de <__addsf3x+0x1c>
 6d6:	79 f4       	brne	.+30     	; 0x6f6 <__addsf3x+0x34>
 6d8:	a6 f5       	brtc	.+104    	; 0x742 <__addsf3x+0x80>
 6da:	0c 94 de 04 	jmp	0x9bc	; 0x9bc <__fp_zero>
 6de:	0e f4       	brtc	.+2      	; 0x6e2 <__addsf3x+0x20>
 6e0:	e0 95       	com	r30
 6e2:	0b 2e       	mov	r0, r27
 6e4:	ba 2f       	mov	r27, r26
 6e6:	a0 2d       	mov	r26, r0
 6e8:	0b 01       	movw	r0, r22
 6ea:	b9 01       	movw	r22, r18
 6ec:	90 01       	movw	r18, r0
 6ee:	0c 01       	movw	r0, r24
 6f0:	ca 01       	movw	r24, r20
 6f2:	a0 01       	movw	r20, r0
 6f4:	11 24       	eor	r1, r1
 6f6:	ff 27       	eor	r31, r31
 6f8:	59 1b       	sub	r21, r25
 6fa:	99 f0       	breq	.+38     	; 0x722 <__addsf3x+0x60>
 6fc:	59 3f       	cpi	r21, 0xF9	; 249
 6fe:	50 f4       	brcc	.+20     	; 0x714 <__addsf3x+0x52>
 700:	50 3e       	cpi	r21, 0xE0	; 224
 702:	68 f1       	brcs	.+90     	; 0x75e <__addsf3x+0x9c>
 704:	1a 16       	cp	r1, r26
 706:	f0 40       	sbci	r31, 0x00	; 0
 708:	a2 2f       	mov	r26, r18
 70a:	23 2f       	mov	r18, r19
 70c:	34 2f       	mov	r19, r20
 70e:	44 27       	eor	r20, r20
 710:	58 5f       	subi	r21, 0xF8	; 248
 712:	f3 cf       	rjmp	.-26     	; 0x6fa <__addsf3x+0x38>
 714:	46 95       	lsr	r20
 716:	37 95       	ror	r19
 718:	27 95       	ror	r18
 71a:	a7 95       	ror	r26
 71c:	f0 40       	sbci	r31, 0x00	; 0
 71e:	53 95       	inc	r21
 720:	c9 f7       	brne	.-14     	; 0x714 <__addsf3x+0x52>
 722:	7e f4       	brtc	.+30     	; 0x742 <__addsf3x+0x80>
 724:	1f 16       	cp	r1, r31
 726:	ba 0b       	sbc	r27, r26
 728:	62 0b       	sbc	r22, r18
 72a:	73 0b       	sbc	r23, r19
 72c:	84 0b       	sbc	r24, r20
 72e:	ba f0       	brmi	.+46     	; 0x75e <__addsf3x+0x9c>
 730:	91 50       	subi	r25, 0x01	; 1
 732:	a1 f0       	breq	.+40     	; 0x75c <__addsf3x+0x9a>
 734:	ff 0f       	add	r31, r31
 736:	bb 1f       	adc	r27, r27
 738:	66 1f       	adc	r22, r22
 73a:	77 1f       	adc	r23, r23
 73c:	88 1f       	adc	r24, r24
 73e:	c2 f7       	brpl	.-16     	; 0x730 <__addsf3x+0x6e>
 740:	0e c0       	rjmp	.+28     	; 0x75e <__addsf3x+0x9c>
 742:	ba 0f       	add	r27, r26
 744:	62 1f       	adc	r22, r18
 746:	73 1f       	adc	r23, r19
 748:	84 1f       	adc	r24, r20
 74a:	48 f4       	brcc	.+18     	; 0x75e <__addsf3x+0x9c>
 74c:	87 95       	ror	r24
 74e:	77 95       	ror	r23
 750:	67 95       	ror	r22
 752:	b7 95       	ror	r27
 754:	f7 95       	ror	r31
 756:	9e 3f       	cpi	r25, 0xFE	; 254
 758:	08 f0       	brcs	.+2      	; 0x75c <__addsf3x+0x9a>
 75a:	b0 cf       	rjmp	.-160    	; 0x6bc <__addsf3+0x28>
 75c:	93 95       	inc	r25
 75e:	88 0f       	add	r24, r24
 760:	08 f0       	brcs	.+2      	; 0x764 <__addsf3x+0xa2>
 762:	99 27       	eor	r25, r25
 764:	ee 0f       	add	r30, r30
 766:	97 95       	ror	r25
 768:	87 95       	ror	r24
 76a:	08 95       	ret

0000076c <__divsf3>:
 76c:	0e 94 ca 03 	call	0x794	; 0x794 <__divsf3x>
 770:	0c 94 ab 04 	jmp	0x956	; 0x956 <__fp_round>
 774:	0e 94 a4 04 	call	0x948	; 0x948 <__fp_pscB>
 778:	58 f0       	brcs	.+22     	; 0x790 <__divsf3+0x24>
 77a:	0e 94 9d 04 	call	0x93a	; 0x93a <__fp_pscA>
 77e:	40 f0       	brcs	.+16     	; 0x790 <__divsf3+0x24>
 780:	29 f4       	brne	.+10     	; 0x78c <__divsf3+0x20>
 782:	5f 3f       	cpi	r21, 0xFF	; 255
 784:	29 f0       	breq	.+10     	; 0x790 <__divsf3+0x24>
 786:	0c 94 94 04 	jmp	0x928	; 0x928 <__fp_inf>
 78a:	51 11       	cpse	r21, r1
 78c:	0c 94 df 04 	jmp	0x9be	; 0x9be <__fp_szero>
 790:	0c 94 9a 04 	jmp	0x934	; 0x934 <__fp_nan>

00000794 <__divsf3x>:
 794:	0e 94 bc 04 	call	0x978	; 0x978 <__fp_split3>
 798:	68 f3       	brcs	.-38     	; 0x774 <__divsf3+0x8>

0000079a <__divsf3_pse>:
 79a:	99 23       	and	r25, r25
 79c:	b1 f3       	breq	.-20     	; 0x78a <__divsf3+0x1e>
 79e:	55 23       	and	r21, r21
 7a0:	91 f3       	breq	.-28     	; 0x786 <__divsf3+0x1a>
 7a2:	95 1b       	sub	r25, r21
 7a4:	55 0b       	sbc	r21, r21
 7a6:	bb 27       	eor	r27, r27
 7a8:	aa 27       	eor	r26, r26
 7aa:	62 17       	cp	r22, r18
 7ac:	73 07       	cpc	r23, r19
 7ae:	84 07       	cpc	r24, r20
 7b0:	38 f0       	brcs	.+14     	; 0x7c0 <__divsf3_pse+0x26>
 7b2:	9f 5f       	subi	r25, 0xFF	; 255
 7b4:	5f 4f       	sbci	r21, 0xFF	; 255
 7b6:	22 0f       	add	r18, r18
 7b8:	33 1f       	adc	r19, r19
 7ba:	44 1f       	adc	r20, r20
 7bc:	aa 1f       	adc	r26, r26
 7be:	a9 f3       	breq	.-22     	; 0x7aa <__divsf3_pse+0x10>
 7c0:	35 d0       	rcall	.+106    	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
 7c2:	0e 2e       	mov	r0, r30
 7c4:	3a f0       	brmi	.+14     	; 0x7d4 <__divsf3_pse+0x3a>
 7c6:	e0 e8       	ldi	r30, 0x80	; 128
 7c8:	32 d0       	rcall	.+100    	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
 7ca:	91 50       	subi	r25, 0x01	; 1
 7cc:	50 40       	sbci	r21, 0x00	; 0
 7ce:	e6 95       	lsr	r30
 7d0:	00 1c       	adc	r0, r0
 7d2:	ca f7       	brpl	.-14     	; 0x7c6 <__divsf3_pse+0x2c>
 7d4:	2b d0       	rcall	.+86     	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
 7d6:	fe 2f       	mov	r31, r30
 7d8:	29 d0       	rcall	.+82     	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
 7da:	66 0f       	add	r22, r22
 7dc:	77 1f       	adc	r23, r23
 7de:	88 1f       	adc	r24, r24
 7e0:	bb 1f       	adc	r27, r27
 7e2:	26 17       	cp	r18, r22
 7e4:	37 07       	cpc	r19, r23
 7e6:	48 07       	cpc	r20, r24
 7e8:	ab 07       	cpc	r26, r27
 7ea:	b0 e8       	ldi	r27, 0x80	; 128
 7ec:	09 f0       	breq	.+2      	; 0x7f0 <__divsf3_pse+0x56>
 7ee:	bb 0b       	sbc	r27, r27
 7f0:	80 2d       	mov	r24, r0
 7f2:	bf 01       	movw	r22, r30
 7f4:	ff 27       	eor	r31, r31
 7f6:	93 58       	subi	r25, 0x83	; 131
 7f8:	5f 4f       	sbci	r21, 0xFF	; 255
 7fa:	3a f0       	brmi	.+14     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 7fc:	9e 3f       	cpi	r25, 0xFE	; 254
 7fe:	51 05       	cpc	r21, r1
 800:	78 f0       	brcs	.+30     	; 0x820 <__DATA_REGION_LENGTH__+0x20>
 802:	0c 94 94 04 	jmp	0x928	; 0x928 <__fp_inf>
 806:	0c 94 df 04 	jmp	0x9be	; 0x9be <__fp_szero>
 80a:	5f 3f       	cpi	r21, 0xFF	; 255
 80c:	e4 f3       	brlt	.-8      	; 0x806 <__DATA_REGION_LENGTH__+0x6>
 80e:	98 3e       	cpi	r25, 0xE8	; 232
 810:	d4 f3       	brlt	.-12     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
 812:	86 95       	lsr	r24
 814:	77 95       	ror	r23
 816:	67 95       	ror	r22
 818:	b7 95       	ror	r27
 81a:	f7 95       	ror	r31
 81c:	9f 5f       	subi	r25, 0xFF	; 255
 81e:	c9 f7       	brne	.-14     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 820:	88 0f       	add	r24, r24
 822:	91 1d       	adc	r25, r1
 824:	96 95       	lsr	r25
 826:	87 95       	ror	r24
 828:	97 f9       	bld	r25, 7
 82a:	08 95       	ret
 82c:	e1 e0       	ldi	r30, 0x01	; 1
 82e:	66 0f       	add	r22, r22
 830:	77 1f       	adc	r23, r23
 832:	88 1f       	adc	r24, r24
 834:	bb 1f       	adc	r27, r27
 836:	62 17       	cp	r22, r18
 838:	73 07       	cpc	r23, r19
 83a:	84 07       	cpc	r24, r20
 83c:	ba 07       	cpc	r27, r26
 83e:	20 f0       	brcs	.+8      	; 0x848 <__DATA_REGION_LENGTH__+0x48>
 840:	62 1b       	sub	r22, r18
 842:	73 0b       	sbc	r23, r19
 844:	84 0b       	sbc	r24, r20
 846:	ba 0b       	sbc	r27, r26
 848:	ee 1f       	adc	r30, r30
 84a:	88 f7       	brcc	.-30     	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
 84c:	e0 95       	com	r30
 84e:	08 95       	ret

00000850 <__fixunssfsi>:
 850:	0e 94 c4 04 	call	0x988	; 0x988 <__fp_splitA>
 854:	88 f0       	brcs	.+34     	; 0x878 <__fixunssfsi+0x28>
 856:	9f 57       	subi	r25, 0x7F	; 127
 858:	98 f0       	brcs	.+38     	; 0x880 <__fixunssfsi+0x30>
 85a:	b9 2f       	mov	r27, r25
 85c:	99 27       	eor	r25, r25
 85e:	b7 51       	subi	r27, 0x17	; 23
 860:	b0 f0       	brcs	.+44     	; 0x88e <__fixunssfsi+0x3e>
 862:	e1 f0       	breq	.+56     	; 0x89c <__fixunssfsi+0x4c>
 864:	66 0f       	add	r22, r22
 866:	77 1f       	adc	r23, r23
 868:	88 1f       	adc	r24, r24
 86a:	99 1f       	adc	r25, r25
 86c:	1a f0       	brmi	.+6      	; 0x874 <__fixunssfsi+0x24>
 86e:	ba 95       	dec	r27
 870:	c9 f7       	brne	.-14     	; 0x864 <__fixunssfsi+0x14>
 872:	14 c0       	rjmp	.+40     	; 0x89c <__fixunssfsi+0x4c>
 874:	b1 30       	cpi	r27, 0x01	; 1
 876:	91 f0       	breq	.+36     	; 0x89c <__fixunssfsi+0x4c>
 878:	0e 94 de 04 	call	0x9bc	; 0x9bc <__fp_zero>
 87c:	b1 e0       	ldi	r27, 0x01	; 1
 87e:	08 95       	ret
 880:	0c 94 de 04 	jmp	0x9bc	; 0x9bc <__fp_zero>
 884:	67 2f       	mov	r22, r23
 886:	78 2f       	mov	r23, r24
 888:	88 27       	eor	r24, r24
 88a:	b8 5f       	subi	r27, 0xF8	; 248
 88c:	39 f0       	breq	.+14     	; 0x89c <__fixunssfsi+0x4c>
 88e:	b9 3f       	cpi	r27, 0xF9	; 249
 890:	cc f3       	brlt	.-14     	; 0x884 <__fixunssfsi+0x34>
 892:	86 95       	lsr	r24
 894:	77 95       	ror	r23
 896:	67 95       	ror	r22
 898:	b3 95       	inc	r27
 89a:	d9 f7       	brne	.-10     	; 0x892 <__fixunssfsi+0x42>
 89c:	3e f4       	brtc	.+14     	; 0x8ac <__fixunssfsi+0x5c>
 89e:	90 95       	com	r25
 8a0:	80 95       	com	r24
 8a2:	70 95       	com	r23
 8a4:	61 95       	neg	r22
 8a6:	7f 4f       	sbci	r23, 0xFF	; 255
 8a8:	8f 4f       	sbci	r24, 0xFF	; 255
 8aa:	9f 4f       	sbci	r25, 0xFF	; 255
 8ac:	08 95       	ret

000008ae <__floatunsisf>:
 8ae:	e8 94       	clt
 8b0:	09 c0       	rjmp	.+18     	; 0x8c4 <__floatsisf+0x12>

000008b2 <__floatsisf>:
 8b2:	97 fb       	bst	r25, 7
 8b4:	3e f4       	brtc	.+14     	; 0x8c4 <__floatsisf+0x12>
 8b6:	90 95       	com	r25
 8b8:	80 95       	com	r24
 8ba:	70 95       	com	r23
 8bc:	61 95       	neg	r22
 8be:	7f 4f       	sbci	r23, 0xFF	; 255
 8c0:	8f 4f       	sbci	r24, 0xFF	; 255
 8c2:	9f 4f       	sbci	r25, 0xFF	; 255
 8c4:	99 23       	and	r25, r25
 8c6:	a9 f0       	breq	.+42     	; 0x8f2 <__floatsisf+0x40>
 8c8:	f9 2f       	mov	r31, r25
 8ca:	96 e9       	ldi	r25, 0x96	; 150
 8cc:	bb 27       	eor	r27, r27
 8ce:	93 95       	inc	r25
 8d0:	f6 95       	lsr	r31
 8d2:	87 95       	ror	r24
 8d4:	77 95       	ror	r23
 8d6:	67 95       	ror	r22
 8d8:	b7 95       	ror	r27
 8da:	f1 11       	cpse	r31, r1
 8dc:	f8 cf       	rjmp	.-16     	; 0x8ce <__floatsisf+0x1c>
 8de:	fa f4       	brpl	.+62     	; 0x91e <__stack+0x1f>
 8e0:	bb 0f       	add	r27, r27
 8e2:	11 f4       	brne	.+4      	; 0x8e8 <__floatsisf+0x36>
 8e4:	60 ff       	sbrs	r22, 0
 8e6:	1b c0       	rjmp	.+54     	; 0x91e <__stack+0x1f>
 8e8:	6f 5f       	subi	r22, 0xFF	; 255
 8ea:	7f 4f       	sbci	r23, 0xFF	; 255
 8ec:	8f 4f       	sbci	r24, 0xFF	; 255
 8ee:	9f 4f       	sbci	r25, 0xFF	; 255
 8f0:	16 c0       	rjmp	.+44     	; 0x91e <__stack+0x1f>
 8f2:	88 23       	and	r24, r24
 8f4:	11 f0       	breq	.+4      	; 0x8fa <__floatsisf+0x48>
 8f6:	96 e9       	ldi	r25, 0x96	; 150
 8f8:	11 c0       	rjmp	.+34     	; 0x91c <__stack+0x1d>
 8fa:	77 23       	and	r23, r23
 8fc:	21 f0       	breq	.+8      	; 0x906 <__stack+0x7>
 8fe:	9e e8       	ldi	r25, 0x8E	; 142
 900:	87 2f       	mov	r24, r23
 902:	76 2f       	mov	r23, r22
 904:	05 c0       	rjmp	.+10     	; 0x910 <__stack+0x11>
 906:	66 23       	and	r22, r22
 908:	71 f0       	breq	.+28     	; 0x926 <__stack+0x27>
 90a:	96 e8       	ldi	r25, 0x86	; 134
 90c:	86 2f       	mov	r24, r22
 90e:	70 e0       	ldi	r23, 0x00	; 0
 910:	60 e0       	ldi	r22, 0x00	; 0
 912:	2a f0       	brmi	.+10     	; 0x91e <__stack+0x1f>
 914:	9a 95       	dec	r25
 916:	66 0f       	add	r22, r22
 918:	77 1f       	adc	r23, r23
 91a:	88 1f       	adc	r24, r24
 91c:	da f7       	brpl	.-10     	; 0x914 <__stack+0x15>
 91e:	88 0f       	add	r24, r24
 920:	96 95       	lsr	r25
 922:	87 95       	ror	r24
 924:	97 f9       	bld	r25, 7
 926:	08 95       	ret

00000928 <__fp_inf>:
 928:	97 f9       	bld	r25, 7
 92a:	9f 67       	ori	r25, 0x7F	; 127
 92c:	80 e8       	ldi	r24, 0x80	; 128
 92e:	70 e0       	ldi	r23, 0x00	; 0
 930:	60 e0       	ldi	r22, 0x00	; 0
 932:	08 95       	ret

00000934 <__fp_nan>:
 934:	9f ef       	ldi	r25, 0xFF	; 255
 936:	80 ec       	ldi	r24, 0xC0	; 192
 938:	08 95       	ret

0000093a <__fp_pscA>:
 93a:	00 24       	eor	r0, r0
 93c:	0a 94       	dec	r0
 93e:	16 16       	cp	r1, r22
 940:	17 06       	cpc	r1, r23
 942:	18 06       	cpc	r1, r24
 944:	09 06       	cpc	r0, r25
 946:	08 95       	ret

00000948 <__fp_pscB>:
 948:	00 24       	eor	r0, r0
 94a:	0a 94       	dec	r0
 94c:	12 16       	cp	r1, r18
 94e:	13 06       	cpc	r1, r19
 950:	14 06       	cpc	r1, r20
 952:	05 06       	cpc	r0, r21
 954:	08 95       	ret

00000956 <__fp_round>:
 956:	09 2e       	mov	r0, r25
 958:	03 94       	inc	r0
 95a:	00 0c       	add	r0, r0
 95c:	11 f4       	brne	.+4      	; 0x962 <__fp_round+0xc>
 95e:	88 23       	and	r24, r24
 960:	52 f0       	brmi	.+20     	; 0x976 <__fp_round+0x20>
 962:	bb 0f       	add	r27, r27
 964:	40 f4       	brcc	.+16     	; 0x976 <__fp_round+0x20>
 966:	bf 2b       	or	r27, r31
 968:	11 f4       	brne	.+4      	; 0x96e <__fp_round+0x18>
 96a:	60 ff       	sbrs	r22, 0
 96c:	04 c0       	rjmp	.+8      	; 0x976 <__fp_round+0x20>
 96e:	6f 5f       	subi	r22, 0xFF	; 255
 970:	7f 4f       	sbci	r23, 0xFF	; 255
 972:	8f 4f       	sbci	r24, 0xFF	; 255
 974:	9f 4f       	sbci	r25, 0xFF	; 255
 976:	08 95       	ret

00000978 <__fp_split3>:
 978:	57 fd       	sbrc	r21, 7
 97a:	90 58       	subi	r25, 0x80	; 128
 97c:	44 0f       	add	r20, r20
 97e:	55 1f       	adc	r21, r21
 980:	59 f0       	breq	.+22     	; 0x998 <__fp_splitA+0x10>
 982:	5f 3f       	cpi	r21, 0xFF	; 255
 984:	71 f0       	breq	.+28     	; 0x9a2 <__fp_splitA+0x1a>
 986:	47 95       	ror	r20

00000988 <__fp_splitA>:
 988:	88 0f       	add	r24, r24
 98a:	97 fb       	bst	r25, 7
 98c:	99 1f       	adc	r25, r25
 98e:	61 f0       	breq	.+24     	; 0x9a8 <__fp_splitA+0x20>
 990:	9f 3f       	cpi	r25, 0xFF	; 255
 992:	79 f0       	breq	.+30     	; 0x9b2 <__fp_splitA+0x2a>
 994:	87 95       	ror	r24
 996:	08 95       	ret
 998:	12 16       	cp	r1, r18
 99a:	13 06       	cpc	r1, r19
 99c:	14 06       	cpc	r1, r20
 99e:	55 1f       	adc	r21, r21
 9a0:	f2 cf       	rjmp	.-28     	; 0x986 <__fp_split3+0xe>
 9a2:	46 95       	lsr	r20
 9a4:	f1 df       	rcall	.-30     	; 0x988 <__fp_splitA>
 9a6:	08 c0       	rjmp	.+16     	; 0x9b8 <__fp_splitA+0x30>
 9a8:	16 16       	cp	r1, r22
 9aa:	17 06       	cpc	r1, r23
 9ac:	18 06       	cpc	r1, r24
 9ae:	99 1f       	adc	r25, r25
 9b0:	f1 cf       	rjmp	.-30     	; 0x994 <__fp_splitA+0xc>
 9b2:	86 95       	lsr	r24
 9b4:	71 05       	cpc	r23, r1
 9b6:	61 05       	cpc	r22, r1
 9b8:	08 94       	sec
 9ba:	08 95       	ret

000009bc <__fp_zero>:
 9bc:	e8 94       	clt

000009be <__fp_szero>:
 9be:	bb 27       	eor	r27, r27
 9c0:	66 27       	eor	r22, r22
 9c2:	77 27       	eor	r23, r23
 9c4:	cb 01       	movw	r24, r22
 9c6:	97 f9       	bld	r25, 7
 9c8:	08 95       	ret

000009ca <__mulsf3>:
 9ca:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <__mulsf3x>
 9ce:	0c 94 ab 04 	jmp	0x956	; 0x956 <__fp_round>
 9d2:	0e 94 9d 04 	call	0x93a	; 0x93a <__fp_pscA>
 9d6:	38 f0       	brcs	.+14     	; 0x9e6 <__mulsf3+0x1c>
 9d8:	0e 94 a4 04 	call	0x948	; 0x948 <__fp_pscB>
 9dc:	20 f0       	brcs	.+8      	; 0x9e6 <__mulsf3+0x1c>
 9de:	95 23       	and	r25, r21
 9e0:	11 f0       	breq	.+4      	; 0x9e6 <__mulsf3+0x1c>
 9e2:	0c 94 94 04 	jmp	0x928	; 0x928 <__fp_inf>
 9e6:	0c 94 9a 04 	jmp	0x934	; 0x934 <__fp_nan>
 9ea:	11 24       	eor	r1, r1
 9ec:	0c 94 df 04 	jmp	0x9be	; 0x9be <__fp_szero>

000009f0 <__mulsf3x>:
 9f0:	0e 94 bc 04 	call	0x978	; 0x978 <__fp_split3>
 9f4:	70 f3       	brcs	.-36     	; 0x9d2 <__mulsf3+0x8>

000009f6 <__mulsf3_pse>:
 9f6:	95 9f       	mul	r25, r21
 9f8:	c1 f3       	breq	.-16     	; 0x9ea <__mulsf3+0x20>
 9fa:	95 0f       	add	r25, r21
 9fc:	50 e0       	ldi	r21, 0x00	; 0
 9fe:	55 1f       	adc	r21, r21
 a00:	62 9f       	mul	r22, r18
 a02:	f0 01       	movw	r30, r0
 a04:	72 9f       	mul	r23, r18
 a06:	bb 27       	eor	r27, r27
 a08:	f0 0d       	add	r31, r0
 a0a:	b1 1d       	adc	r27, r1
 a0c:	63 9f       	mul	r22, r19
 a0e:	aa 27       	eor	r26, r26
 a10:	f0 0d       	add	r31, r0
 a12:	b1 1d       	adc	r27, r1
 a14:	aa 1f       	adc	r26, r26
 a16:	64 9f       	mul	r22, r20
 a18:	66 27       	eor	r22, r22
 a1a:	b0 0d       	add	r27, r0
 a1c:	a1 1d       	adc	r26, r1
 a1e:	66 1f       	adc	r22, r22
 a20:	82 9f       	mul	r24, r18
 a22:	22 27       	eor	r18, r18
 a24:	b0 0d       	add	r27, r0
 a26:	a1 1d       	adc	r26, r1
 a28:	62 1f       	adc	r22, r18
 a2a:	73 9f       	mul	r23, r19
 a2c:	b0 0d       	add	r27, r0
 a2e:	a1 1d       	adc	r26, r1
 a30:	62 1f       	adc	r22, r18
 a32:	83 9f       	mul	r24, r19
 a34:	a0 0d       	add	r26, r0
 a36:	61 1d       	adc	r22, r1
 a38:	22 1f       	adc	r18, r18
 a3a:	74 9f       	mul	r23, r20
 a3c:	33 27       	eor	r19, r19
 a3e:	a0 0d       	add	r26, r0
 a40:	61 1d       	adc	r22, r1
 a42:	23 1f       	adc	r18, r19
 a44:	84 9f       	mul	r24, r20
 a46:	60 0d       	add	r22, r0
 a48:	21 1d       	adc	r18, r1
 a4a:	82 2f       	mov	r24, r18
 a4c:	76 2f       	mov	r23, r22
 a4e:	6a 2f       	mov	r22, r26
 a50:	11 24       	eor	r1, r1
 a52:	9f 57       	subi	r25, 0x7F	; 127
 a54:	50 40       	sbci	r21, 0x00	; 0
 a56:	9a f0       	brmi	.+38     	; 0xa7e <__mulsf3_pse+0x88>
 a58:	f1 f0       	breq	.+60     	; 0xa96 <__mulsf3_pse+0xa0>
 a5a:	88 23       	and	r24, r24
 a5c:	4a f0       	brmi	.+18     	; 0xa70 <__mulsf3_pse+0x7a>
 a5e:	ee 0f       	add	r30, r30
 a60:	ff 1f       	adc	r31, r31
 a62:	bb 1f       	adc	r27, r27
 a64:	66 1f       	adc	r22, r22
 a66:	77 1f       	adc	r23, r23
 a68:	88 1f       	adc	r24, r24
 a6a:	91 50       	subi	r25, 0x01	; 1
 a6c:	50 40       	sbci	r21, 0x00	; 0
 a6e:	a9 f7       	brne	.-22     	; 0xa5a <__mulsf3_pse+0x64>
 a70:	9e 3f       	cpi	r25, 0xFE	; 254
 a72:	51 05       	cpc	r21, r1
 a74:	80 f0       	brcs	.+32     	; 0xa96 <__mulsf3_pse+0xa0>
 a76:	0c 94 94 04 	jmp	0x928	; 0x928 <__fp_inf>
 a7a:	0c 94 df 04 	jmp	0x9be	; 0x9be <__fp_szero>
 a7e:	5f 3f       	cpi	r21, 0xFF	; 255
 a80:	e4 f3       	brlt	.-8      	; 0xa7a <__mulsf3_pse+0x84>
 a82:	98 3e       	cpi	r25, 0xE8	; 232
 a84:	d4 f3       	brlt	.-12     	; 0xa7a <__mulsf3_pse+0x84>
 a86:	86 95       	lsr	r24
 a88:	77 95       	ror	r23
 a8a:	67 95       	ror	r22
 a8c:	b7 95       	ror	r27
 a8e:	f7 95       	ror	r31
 a90:	e7 95       	ror	r30
 a92:	9f 5f       	subi	r25, 0xFF	; 255
 a94:	c1 f7       	brne	.-16     	; 0xa86 <__mulsf3_pse+0x90>
 a96:	fe 2b       	or	r31, r30
 a98:	88 0f       	add	r24, r24
 a9a:	91 1d       	adc	r25, r1
 a9c:	96 95       	lsr	r25
 a9e:	87 95       	ror	r24
 aa0:	97 f9       	bld	r25, 7
 aa2:	08 95       	ret

00000aa4 <__divmodhi4>:
 aa4:	97 fb       	bst	r25, 7
 aa6:	07 2e       	mov	r0, r23
 aa8:	16 f4       	brtc	.+4      	; 0xaae <__divmodhi4+0xa>
 aaa:	00 94       	com	r0
 aac:	07 d0       	rcall	.+14     	; 0xabc <__divmodhi4_neg1>
 aae:	77 fd       	sbrc	r23, 7
 ab0:	09 d0       	rcall	.+18     	; 0xac4 <__divmodhi4_neg2>
 ab2:	0e 94 75 05 	call	0xaea	; 0xaea <__udivmodhi4>
 ab6:	07 fc       	sbrc	r0, 7
 ab8:	05 d0       	rcall	.+10     	; 0xac4 <__divmodhi4_neg2>
 aba:	3e f4       	brtc	.+14     	; 0xaca <__divmodhi4_exit>

00000abc <__divmodhi4_neg1>:
 abc:	90 95       	com	r25
 abe:	81 95       	neg	r24
 ac0:	9f 4f       	sbci	r25, 0xFF	; 255
 ac2:	08 95       	ret

00000ac4 <__divmodhi4_neg2>:
 ac4:	70 95       	com	r23
 ac6:	61 95       	neg	r22
 ac8:	7f 4f       	sbci	r23, 0xFF	; 255

00000aca <__divmodhi4_exit>:
 aca:	08 95       	ret

00000acc <__umulhisi3>:
 acc:	a2 9f       	mul	r26, r18
 ace:	b0 01       	movw	r22, r0
 ad0:	b3 9f       	mul	r27, r19
 ad2:	c0 01       	movw	r24, r0
 ad4:	a3 9f       	mul	r26, r19
 ad6:	70 0d       	add	r23, r0
 ad8:	81 1d       	adc	r24, r1
 ada:	11 24       	eor	r1, r1
 adc:	91 1d       	adc	r25, r1
 ade:	b2 9f       	mul	r27, r18
 ae0:	70 0d       	add	r23, r0
 ae2:	81 1d       	adc	r24, r1
 ae4:	11 24       	eor	r1, r1
 ae6:	91 1d       	adc	r25, r1
 ae8:	08 95       	ret

00000aea <__udivmodhi4>:
 aea:	aa 1b       	sub	r26, r26
 aec:	bb 1b       	sub	r27, r27
 aee:	51 e1       	ldi	r21, 0x11	; 17
 af0:	07 c0       	rjmp	.+14     	; 0xb00 <__udivmodhi4_ep>

00000af2 <__udivmodhi4_loop>:
 af2:	aa 1f       	adc	r26, r26
 af4:	bb 1f       	adc	r27, r27
 af6:	a6 17       	cp	r26, r22
 af8:	b7 07       	cpc	r27, r23
 afa:	10 f0       	brcs	.+4      	; 0xb00 <__udivmodhi4_ep>
 afc:	a6 1b       	sub	r26, r22
 afe:	b7 0b       	sbc	r27, r23

00000b00 <__udivmodhi4_ep>:
 b00:	88 1f       	adc	r24, r24
 b02:	99 1f       	adc	r25, r25
 b04:	5a 95       	dec	r21
 b06:	a9 f7       	brne	.-22     	; 0xaf2 <__udivmodhi4_loop>
 b08:	80 95       	com	r24
 b0a:	90 95       	com	r25
 b0c:	bc 01       	movw	r22, r24
 b0e:	cd 01       	movw	r24, r26
 b10:	08 95       	ret

00000b12 <_exit>:
 b12:	f8 94       	cli

00000b14 <__stop_program>:
 b14:	ff cf       	rjmp	.-2      	; 0xb14 <__stop_program>
