
LAB2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000a62  00000af6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a62  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000016  00800110  00800110  00000b06  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b06  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b38  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000b78  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010f4  00000000  00000000  00000c40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000092c  00000000  00000000  00001d34  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000895  00000000  00000000  00002660  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b4  00000000  00000000  00002ef8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000512  00000000  00000000  000030ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006ac  00000000  00000000  000035be  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00003c6a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 ba 02 	jmp	0x574	; 0x574 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e6       	ldi	r30, 0x62	; 98
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 32       	cpi	r26, 0x26	; 38
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <main>
  9e:	0c 94 2f 05 	jmp	0xa5e	; 0xa5e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initADC>:
 */ 
#include "ADC.h"

void initADC(){
	
	ADMUX = 0;
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	10 82       	st	Z, r1
	DIDR0 |= (1 <<ADC0D);	//desabilitar el A0 como digital
  ac:	ae e7       	ldi	r26, 0x7E	; 126
  ae:	b0 e0       	ldi	r27, 0x00	; 0
  b0:	8c 91       	ld	r24, X
  b2:	81 60       	ori	r24, 0x01	; 1
  b4:	8c 93       	st	X, r24
	DIDR0 |= (1<<ADC1D);     //desabilitar el A1 como digital
  b6:	8c 91       	ld	r24, X
  b8:	82 60       	ori	r24, 0x02	; 2
  ba:	8c 93       	st	X, r24


	//JUSTIFICACION IZQUIERDA
	ADMUX |= (1<<ADLAR);
  bc:	80 81       	ld	r24, Z
  be:	80 62       	ori	r24, 0x20	; 32
  c0:	80 83       	st	Z, r24
	//REFERENCIA INTERNA
	ADMUX |= (1<<REFS0);
  c2:	80 81       	ld	r24, Z
  c4:	80 64       	ori	r24, 0x40	; 64
  c6:	80 83       	st	Z, r24
	ADMUX &= ~(1 << REFS1);
  c8:	80 81       	ld	r24, Z
  ca:	8f 77       	andi	r24, 0x7F	; 127
  cc:	80 83       	st	Z, r24
	// HABILITAR INTERRUPCION
	ADCSRA |= (1<<ADIE);
  ce:	ea e7       	ldi	r30, 0x7A	; 122
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	88 60       	ori	r24, 0x08	; 8
  d6:	80 83       	st	Z, r24
	//PRESCALER 128
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);  //Habilitando prescaler de 16M/128 frecuencia = 125Khz
  d8:	80 81       	ld	r24, Z
  da:	87 60       	ori	r24, 0x07	; 7
  dc:	80 83       	st	Z, r24
	//HABILITAR ADC
	ADCSRA |= (1<<ADEN);
  de:	80 81       	ld	r24, Z
  e0:	80 68       	ori	r24, 0x80	; 128
  e2:	80 83       	st	Z, r24
  e4:	08 95       	ret

000000e6 <dato_a_mostrar>:
}


void dato_a_mostrar(char a)
{
	if(a & 1)				//0000 0001, el  a&1 es una operación bitwise, si el primer bit menos signfiativo es 1, la condición es verdadera
  e6:	80 ff       	sbrs	r24, 0
  e8:	04 c0       	rjmp	.+8      	; 0xf2 <dato_a_mostrar+0xc>
	PORTB |= (1<<2);
  ea:	95 b1       	in	r25, 0x05	; 5
  ec:	94 60       	ori	r25, 0x04	; 4
  ee:	95 b9       	out	0x05, r25	; 5
  f0:	03 c0       	rjmp	.+6      	; 0xf8 <dato_a_mostrar+0x12>
	else
	PORTB &= ~(1<<2);
  f2:	95 b1       	in	r25, 0x05	; 5
  f4:	9b 7f       	andi	r25, 0xFB	; 251
  f6:	95 b9       	out	0x05, r25	; 5
	
	if(a & 2)			   //0000 0010, ahora verifica el segundo bit menos significativo, y si es 1, la condición es verdadera
  f8:	81 ff       	sbrs	r24, 1
  fa:	04 c0       	rjmp	.+8      	; 0x104 <dato_a_mostrar+0x1e>
	PORTB |= (1<<3);
  fc:	95 b1       	in	r25, 0x05	; 5
  fe:	98 60       	ori	r25, 0x08	; 8
 100:	95 b9       	out	0x05, r25	; 5
 102:	03 c0       	rjmp	.+6      	; 0x10a <dato_a_mostrar+0x24>
	else
	PORTB &= ~(1<<3);
 104:	95 b1       	in	r25, 0x05	; 5
 106:	97 7f       	andi	r25, 0xF7	; 247
 108:	95 b9       	out	0x05, r25	; 5
	
	if(a & 4)				//0000 0100
 10a:	82 ff       	sbrs	r24, 2
 10c:	04 c0       	rjmp	.+8      	; 0x116 <dato_a_mostrar+0x30>
	PORTD |= (1<<PORTD2);
 10e:	9b b1       	in	r25, 0x0b	; 11
 110:	94 60       	ori	r25, 0x04	; 4
 112:	9b b9       	out	0x0b, r25	; 11
 114:	03 c0       	rjmp	.+6      	; 0x11c <dato_a_mostrar+0x36>
	else
	PORTD &= ~(1<<PORTD2);
 116:	9b b1       	in	r25, 0x0b	; 11
 118:	9b 7f       	andi	r25, 0xFB	; 251
 11a:	9b b9       	out	0x0b, r25	; 11
	
	if(a & 8)				//0000 1000
 11c:	83 ff       	sbrs	r24, 3
 11e:	04 c0       	rjmp	.+8      	; 0x128 <dato_a_mostrar+0x42>
	PORTD |= (1<<PORTD3);
 120:	9b b1       	in	r25, 0x0b	; 11
 122:	98 60       	ori	r25, 0x08	; 8
 124:	9b b9       	out	0x0b, r25	; 11
 126:	03 c0       	rjmp	.+6      	; 0x12e <dato_a_mostrar+0x48>
	else
	PORTD &= ~(1<<PORTD3);
 128:	9b b1       	in	r25, 0x0b	; 11
 12a:	97 7f       	andi	r25, 0xF7	; 247
 12c:	9b b9       	out	0x0b, r25	; 11
	
	if(a & 16)			    //0001 0000
 12e:	84 ff       	sbrs	r24, 4
 130:	04 c0       	rjmp	.+8      	; 0x13a <dato_a_mostrar+0x54>
	PORTD |= (1<<PORTD4);
 132:	9b b1       	in	r25, 0x0b	; 11
 134:	90 61       	ori	r25, 0x10	; 16
 136:	9b b9       	out	0x0b, r25	; 11
 138:	03 c0       	rjmp	.+6      	; 0x140 <dato_a_mostrar+0x5a>
	else
	PORTD &= ~(1<<PORTD4);
 13a:	9b b1       	in	r25, 0x0b	; 11
 13c:	9f 7e       	andi	r25, 0xEF	; 239
 13e:	9b b9       	out	0x0b, r25	; 11

	if(a & 32)			    //0010 0000
 140:	85 ff       	sbrs	r24, 5
 142:	04 c0       	rjmp	.+8      	; 0x14c <dato_a_mostrar+0x66>
	PORTD |= (1<<PORTD5);
 144:	9b b1       	in	r25, 0x0b	; 11
 146:	90 62       	ori	r25, 0x20	; 32
 148:	9b b9       	out	0x0b, r25	; 11
 14a:	03 c0       	rjmp	.+6      	; 0x152 <dato_a_mostrar+0x6c>
	else
	PORTD &= ~(1<<PORTD5);
 14c:	9b b1       	in	r25, 0x0b	; 11
 14e:	9f 7d       	andi	r25, 0xDF	; 223
 150:	9b b9       	out	0x0b, r25	; 11
	
	if(a & 64)			   //0100 0000
 152:	86 ff       	sbrs	r24, 6
 154:	04 c0       	rjmp	.+8      	; 0x15e <dato_a_mostrar+0x78>
	PORTD |= (1<<PORTD6);
 156:	9b b1       	in	r25, 0x0b	; 11
 158:	90 64       	ori	r25, 0x40	; 64
 15a:	9b b9       	out	0x0b, r25	; 11
 15c:	03 c0       	rjmp	.+6      	; 0x164 <dato_a_mostrar+0x7e>
	else
	PORTD &= ~(1<<PORTD6);
 15e:	9b b1       	in	r25, 0x0b	; 11
 160:	9f 7b       	andi	r25, 0xBF	; 191
 162:	9b b9       	out	0x0b, r25	; 11
	
	if(a & 128)			   //1000 0000
 164:	88 23       	and	r24, r24
 166:	24 f4       	brge	.+8      	; 0x170 <dato_a_mostrar+0x8a>
	PORTD |= (1<<PORTD7);
 168:	8b b1       	in	r24, 0x0b	; 11
 16a:	80 68       	ori	r24, 0x80	; 128
 16c:	8b b9       	out	0x0b, r24	; 11
 16e:	08 95       	ret
	else
	PORTD &= ~(1<<PORTD7);
 170:	8b b1       	in	r24, 0x0b	; 11
 172:	8f 77       	andi	r24, 0x7F	; 127
 174:	8b b9       	out	0x0b, r24	; 11
 176:	08 95       	ret

00000178 <inicio>:
	inicio(0x06);  //Comando que indica el fabricante del LCD, comenzar a almacenar en DDRAM
}

void inicio(char a)
{
	PORTB &= ~(1<<PORTB0);  //RS = 0, se le indica que es modo comando
 178:	95 b1       	in	r25, 0x05	; 5
 17a:	9e 7f       	andi	r25, 0xFE	; 254
 17c:	95 b9       	out	0x05, r25	; 5
	dato_a_mostrar(a);
 17e:	0e 94 73 00 	call	0xe6	; 0xe6 <dato_a_mostrar>
	PORTB |= (1<<PORTB1);    // E = 1, se le indica que envie los datos
 182:	85 b1       	in	r24, 0x05	; 5
 184:	82 60       	ori	r24, 0x02	; 2
 186:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 188:	8f e9       	ldi	r24, 0x9F	; 159
 18a:	9f e0       	ldi	r25, 0x0F	; 15
 18c:	01 97       	sbiw	r24, 0x01	; 1
 18e:	f1 f7       	brne	.-4      	; 0x18c <inicio+0x14>
 190:	00 c0       	rjmp	.+0      	; 0x192 <inicio+0x1a>
 192:	00 00       	nop
	_delay_ms(1);
	PORTB &= ~(1<<PORTB1);   // E = 0,  se le indica que se cierra el envio de datos
 194:	85 b1       	in	r24, 0x05	; 5
 196:	8d 7f       	andi	r24, 0xFD	; 253
 198:	85 b9       	out	0x05, r24	; 5
 19a:	8f e9       	ldi	r24, 0x9F	; 159
 19c:	9f e0       	ldi	r25, 0x0F	; 15
 19e:	01 97       	sbiw	r24, 0x01	; 1
 1a0:	f1 f7       	brne	.-4      	; 0x19e <inicio+0x26>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <inicio+0x2c>
 1a4:	00 00       	nop
 1a6:	08 95       	ret

000001a8 <Lcd_Init8bits>:
 *  Author: alane
 */ 
#include "LCD8bits.h"
void Lcd_Init8bits()
{
	PORTB &= ~(1<<PORTB0);   //RS = 0, se le indica que es modo comando
 1a8:	85 b1       	in	r24, 0x05	; 5
 1aa:	8e 7f       	andi	r24, 0xFE	; 254
 1ac:	85 b9       	out	0x05, r24	; 5
	PORTB &= ~(1<<PORTB1);   //E = 0
 1ae:	85 b1       	in	r24, 0x05	; 5
 1b0:	8d 7f       	andi	r24, 0xFD	; 253
 1b2:	85 b9       	out	0x05, r24	; 5
 1b4:	2f ef       	ldi	r18, 0xFF	; 255
 1b6:	89 ef       	ldi	r24, 0xF9	; 249
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	21 50       	subi	r18, 0x01	; 1
 1bc:	80 40       	sbci	r24, 0x00	; 0
 1be:	90 40       	sbci	r25, 0x00	; 0
 1c0:	e1 f7       	brne	.-8      	; 0x1ba <Lcd_Init8bits+0x12>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <Lcd_Init8bits+0x1c>
 1c4:	00 00       	nop
	_delay_ms(20);     //Pequeños delay que indica el fabricante del LCD
	inicio(0x30);     //Comando que se repite 3 veces, que indica el fabricante de la LCD
 1c6:	80 e3       	ldi	r24, 0x30	; 48
 1c8:	0e 94 bc 00 	call	0x178	; 0x178 <inicio>
 1cc:	8f e1       	ldi	r24, 0x1F	; 31
 1ce:	9e e4       	ldi	r25, 0x4E	; 78
 1d0:	01 97       	sbiw	r24, 0x01	; 1
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <Lcd_Init8bits+0x28>
 1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <Lcd_Init8bits+0x2e>
 1d6:	00 00       	nop
	_delay_ms(5);
	inicio(0x30);
 1d8:	80 e3       	ldi	r24, 0x30	; 48
 1da:	0e 94 bc 00 	call	0x178	; 0x178 <inicio>
 1de:	8f e1       	ldi	r24, 0x1F	; 31
 1e0:	9e e4       	ldi	r25, 0x4E	; 78
 1e2:	01 97       	sbiw	r24, 0x01	; 1
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <Lcd_Init8bits+0x3a>
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <Lcd_Init8bits+0x40>
 1e8:	00 00       	nop
	_delay_ms(5);
	inicio(0x30);
 1ea:	80 e3       	ldi	r24, 0x30	; 48
 1ec:	0e 94 bc 00 	call	0x178	; 0x178 <inicio>
 1f0:	8f e3       	ldi	r24, 0x3F	; 63
 1f2:	9c e9       	ldi	r25, 0x9C	; 156
 1f4:	01 97       	sbiw	r24, 0x01	; 1
 1f6:	f1 f7       	brne	.-4      	; 0x1f4 <Lcd_Init8bits+0x4c>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <Lcd_Init8bits+0x52>
 1fa:	00 00       	nop
	_delay_ms(10);

	inicio(0x38);  //Comando que indica el fabricante del LCD, usando la matriz de 5X8
 1fc:	88 e3       	ldi	r24, 0x38	; 56
 1fe:	0e 94 bc 00 	call	0x178	; 0x178 <inicio>
	inicio(0x0C);  //Comando que indica el fabricante del LCD, display encendido
 202:	8c e0       	ldi	r24, 0x0C	; 12
 204:	0e 94 bc 00 	call	0x178	; 0x178 <inicio>
	inicio(0x01);  //Comando que indica el fabricante del LCD, Limpiar LCD
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	0e 94 bc 00 	call	0x178	; 0x178 <inicio>
	inicio(0x06);  //Comando que indica el fabricante del LCD, comenzar a almacenar en DDRAM
 20e:	86 e0       	ldi	r24, 0x06	; 6
 210:	0e 94 bc 00 	call	0x178	; 0x178 <inicio>
 214:	08 95       	ret

00000216 <Lcd_Clear>:



void Lcd_Clear()    //Limpia la pantalla LCD
{
	inicio(1);  //Comando dado por el fabricante de la LCD
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	0e 94 bc 00 	call	0x178	; 0x178 <inicio>
 21c:	08 95       	ret

0000021e <Lcd_Set_Cursor>:



void Lcd_Set_Cursor(char a, char b)
{
	if(a == 0)
 21e:	81 11       	cpse	r24, r1
 220:	05 c0       	rjmp	.+10     	; 0x22c <Lcd_Set_Cursor+0xe>
	inicio(0x80 + b);  //Posicionarse en la linea 1 y se suma la columna
 222:	80 e8       	ldi	r24, 0x80	; 128
 224:	86 0f       	add	r24, r22
 226:	0e 94 bc 00 	call	0x178	; 0x178 <inicio>
 22a:	08 95       	ret
	
	else if(a == 1)
 22c:	81 30       	cpi	r24, 0x01	; 1
 22e:	21 f4       	brne	.+8      	; 0x238 <Lcd_Set_Cursor+0x1a>
	inicio(0xC0 + b);  //Posicionarse en la linea 2  y se suma la columna
 230:	80 ec       	ldi	r24, 0xC0	; 192
 232:	86 0f       	add	r24, r22
 234:	0e 94 bc 00 	call	0x178	; 0x178 <inicio>
 238:	08 95       	ret

0000023a <Lcd_Write_Char>:
}


void Lcd_Write_Char(char data)
{
	PORTB |= (1<<PORTB0);        // RS = 1, se le indica que esta en modo caracter
 23a:	95 b1       	in	r25, 0x05	; 5
 23c:	91 60       	ori	r25, 0x01	; 1
 23e:	95 b9       	out	0x05, r25	; 5
	dato_a_mostrar(data);             //Escribir el caracter
 240:	0e 94 73 00 	call	0xe6	; 0xe6 <dato_a_mostrar>
	PORTB |= (1<<PORTB1);       // E = 1, enviar el dato
 244:	85 b1       	in	r24, 0x05	; 5
 246:	82 60       	ori	r24, 0x02	; 2
 248:	85 b9       	out	0x05, r24	; 5
 24a:	8f e9       	ldi	r24, 0x9F	; 159
 24c:	9f e0       	ldi	r25, 0x0F	; 15
 24e:	01 97       	sbiw	r24, 0x01	; 1
 250:	f1 f7       	brne	.-4      	; 0x24e <Lcd_Write_Char+0x14>
 252:	00 c0       	rjmp	.+0      	; 0x254 <Lcd_Write_Char+0x1a>
 254:	00 00       	nop
	_delay_ms(1);
	PORTB &= ~(1<<PORTB1);    // E = 0
 256:	85 b1       	in	r24, 0x05	; 5
 258:	8d 7f       	andi	r24, 0xFD	; 253
 25a:	85 b9       	out	0x05, r24	; 5
 25c:	8f e9       	ldi	r24, 0x9F	; 159
 25e:	9f e0       	ldi	r25, 0x0F	; 15
 260:	01 97       	sbiw	r24, 0x01	; 1
 262:	f1 f7       	brne	.-4      	; 0x260 <Lcd_Write_Char+0x26>
 264:	00 c0       	rjmp	.+0      	; 0x266 <Lcd_Write_Char+0x2c>
 266:	00 00       	nop
 268:	08 95       	ret

0000026a <Lcd_Write_String>:
	_delay_ms(1);
}


void Lcd_Write_String(char *a) //Usando punteros, ya que, estos almacenan por ejemplo *dato = hola\0, al final siempre llevan un caracter nulo
{
 26a:	0f 93       	push	r16
 26c:	1f 93       	push	r17
 26e:	cf 93       	push	r28
 270:	df 93       	push	r29
 272:	8c 01       	movw	r16, r24
	int i;
	for(i=0; a[i]!='\0'; i++)   //Se recorre todo el puntero, hasta que el valor sea nulo
 274:	c0 e0       	ldi	r28, 0x00	; 0
 276:	d0 e0       	ldi	r29, 0x00	; 0
 278:	03 c0       	rjmp	.+6      	; 0x280 <Lcd_Write_String+0x16>
	Lcd_Write_Char(a[i]);
 27a:	0e 94 1d 01 	call	0x23a	; 0x23a <Lcd_Write_Char>


void Lcd_Write_String(char *a) //Usando punteros, ya que, estos almacenan por ejemplo *dato = hola\0, al final siempre llevan un caracter nulo
{
	int i;
	for(i=0; a[i]!='\0'; i++)   //Se recorre todo el puntero, hasta que el valor sea nulo
 27e:	21 96       	adiw	r28, 0x01	; 1
 280:	f8 01       	movw	r30, r16
 282:	ec 0f       	add	r30, r28
 284:	fd 1f       	adc	r31, r29
 286:	80 81       	ld	r24, Z
 288:	81 11       	cpse	r24, r1
 28a:	f7 cf       	rjmp	.-18     	; 0x27a <Lcd_Write_String+0x10>
	Lcd_Write_Char(a[i]);
}
 28c:	df 91       	pop	r29
 28e:	cf 91       	pop	r28
 290:	1f 91       	pop	r17
 292:	0f 91       	pop	r16
 294:	08 95       	ret

00000296 <setup>:
void actualizarLista(char *lista, int valor);
void actualizarLCD(void);

// Configuración inicial del sistema
void setup(void) {
	cli();  // Deshabilitar interrupciones globales
 296:	f8 94       	cli
	DDRD = 0xFF;  // Puerto D como salida
 298:	8f ef       	ldi	r24, 0xFF	; 255
 29a:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0xFF;  // Puerto B como salida
 29c:	84 b9       	out	0x04, r24	; 4
	DDRC = 0;     // Puerto C como entrada
 29e:	17 b8       	out	0x07, r1	; 7
	
	
	Lcd_Init8bits();  // Inicializar pantalla LCD
 2a0:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <Lcd_Init8bits>
 2a4:	2f ef       	ldi	r18, 0xFF	; 255
 2a6:	80 e7       	ldi	r24, 0x70	; 112
 2a8:	92 e0       	ldi	r25, 0x02	; 2
 2aa:	21 50       	subi	r18, 0x01	; 1
 2ac:	80 40       	sbci	r24, 0x00	; 0
 2ae:	90 40       	sbci	r25, 0x00	; 0
 2b0:	e1 f7       	brne	.-8      	; 0x2aa <setup+0x14>
 2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <setup+0x1e>
 2b4:	00 00       	nop
	_delay_ms(50);    // Esperar para asegurarse de que la LCD se inicialice correctamente
	Lcd_Clear();      // Limpiar pantalla LCD
 2b6:	0e 94 0b 01 	call	0x216	; 0x216 <Lcd_Clear>
	initADC();  // Inicializar ADC
 2ba:	0e 94 53 00 	call	0xa6	; 0xa6 <initADC>
	ADCSRA |= (1 << ADSC);  // Iniciar la primera conversión ADC
 2be:	ea e7       	ldi	r30, 0x7A	; 122
 2c0:	f0 e0       	ldi	r31, 0x00	; 0
 2c2:	80 81       	ld	r24, Z
 2c4:	80 64       	ori	r24, 0x40	; 64
 2c6:	80 83       	st	Z, r24

	sei();  // Habilitar interrupciones globales
 2c8:	78 94       	sei
 2ca:	08 95       	ret

000002cc <actualizarVoltaje>:
}

// Función para convertir un valor ADC a voltaje y actualizar una cadena
void actualizarVoltaje(char *lista, uint8_t valor) {
 2cc:	8f 92       	push	r8
 2ce:	9f 92       	push	r9
 2d0:	af 92       	push	r10
 2d2:	bf 92       	push	r11
 2d4:	cf 92       	push	r12
 2d6:	df 92       	push	r13
 2d8:	ef 92       	push	r14
 2da:	ff 92       	push	r15
 2dc:	0f 93       	push	r16
 2de:	1f 93       	push	r17
 2e0:	cf 93       	push	r28
 2e2:	df 93       	push	r29
 2e4:	ec 01       	movw	r28, r24
	float voltaje = (valor * 5.0) / 255.0;
 2e6:	70 e0       	ldi	r23, 0x00	; 0
 2e8:	80 e0       	ldi	r24, 0x00	; 0
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__floatsisf>
 2f0:	20 e0       	ldi	r18, 0x00	; 0
 2f2:	30 e0       	ldi	r19, 0x00	; 0
 2f4:	40 ea       	ldi	r20, 0xA0	; 160
 2f6:	50 e4       	ldi	r21, 0x40	; 64
 2f8:	0e 94 8b 04 	call	0x916	; 0x916 <__mulsf3>
 2fc:	20 e0       	ldi	r18, 0x00	; 0
 2fe:	30 e0       	ldi	r19, 0x00	; 0
 300:	4f e7       	ldi	r20, 0x7F	; 127
 302:	53 e4       	ldi	r21, 0x43	; 67
 304:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <__divsf3>
 308:	4b 01       	movw	r8, r22
 30a:	5c 01       	movw	r10, r24
	uint16_t int_part = (uint16_t)voltaje;
 30c:	0e 94 ce 03 	call	0x79c	; 0x79c <__fixunssfsi>
 310:	6b 01       	movw	r12, r22
 312:	7c 01       	movw	r14, r24
 314:	8b 01       	movw	r16, r22
	uint16_t dec_part = (uint16_t)((voltaje - int_part) * 100);  // Dos decimales
 316:	80 e0       	ldi	r24, 0x00	; 0
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
 31e:	9b 01       	movw	r18, r22
 320:	ac 01       	movw	r20, r24
 322:	c5 01       	movw	r24, r10
 324:	b4 01       	movw	r22, r8
 326:	0e 94 ef 02 	call	0x5de	; 0x5de <__subsf3>
 32a:	20 e0       	ldi	r18, 0x00	; 0
 32c:	30 e0       	ldi	r19, 0x00	; 0
 32e:	48 ec       	ldi	r20, 0xC8	; 200
 330:	52 e4       	ldi	r21, 0x42	; 66
 332:	0e 94 8b 04 	call	0x916	; 0x916 <__mulsf3>
 336:	0e 94 ce 03 	call	0x79c	; 0x79c <__fixunssfsi>
 33a:	4b 01       	movw	r8, r22
 33c:	5c 01       	movw	r10, r24

	if (int_part < 10) {
 33e:	0a 30       	cpi	r16, 0x0A	; 10
 340:	11 05       	cpc	r17, r1
 342:	40 f5       	brcc	.+80     	; 0x394 <actualizarVoltaje+0xc8>
		lista[0] = '0' + int_part;
 344:	80 e3       	ldi	r24, 0x30	; 48
 346:	8c 0d       	add	r24, r12
 348:	88 83       	st	Y, r24
		lista[1] = '.';
 34a:	8e e2       	ldi	r24, 0x2E	; 46
 34c:	89 83       	std	Y+1, r24	; 0x01
		lista[2] = '0' + (dec_part / 10);
 34e:	94 01       	movw	r18, r8
 350:	ad ec       	ldi	r26, 0xCD	; 205
 352:	bc ec       	ldi	r27, 0xCC	; 204
 354:	0e 94 0c 05 	call	0xa18	; 0xa18 <__umulhisi3>
 358:	ac 01       	movw	r20, r24
 35a:	56 95       	lsr	r21
 35c:	47 95       	ror	r20
 35e:	56 95       	lsr	r21
 360:	47 95       	ror	r20
 362:	56 95       	lsr	r21
 364:	47 95       	ror	r20
 366:	80 e3       	ldi	r24, 0x30	; 48
 368:	84 0f       	add	r24, r20
 36a:	8a 83       	std	Y+2, r24	; 0x02
		lista[3] = '0' + (dec_part % 10);
 36c:	ca 01       	movw	r24, r20
 36e:	88 0f       	add	r24, r24
 370:	99 1f       	adc	r25, r25
 372:	44 0f       	add	r20, r20
 374:	55 1f       	adc	r21, r21
 376:	44 0f       	add	r20, r20
 378:	55 1f       	adc	r21, r21
 37a:	44 0f       	add	r20, r20
 37c:	55 1f       	adc	r21, r21
 37e:	48 0f       	add	r20, r24
 380:	59 1f       	adc	r21, r25
 382:	c4 01       	movw	r24, r8
 384:	84 1b       	sub	r24, r20
 386:	95 0b       	sbc	r25, r21
 388:	80 5d       	subi	r24, 0xD0	; 208
 38a:	8b 83       	std	Y+3, r24	; 0x03
		lista[4] = 'V';
 38c:	86 e5       	ldi	r24, 0x56	; 86
 38e:	8c 83       	std	Y+4, r24	; 0x04
		lista[5] = '\0';
 390:	1d 82       	std	Y+5, r1	; 0x05
 392:	41 c0       	rjmp	.+130    	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
		} else {
		lista[0] = '0' + (int_part / 10);
 394:	96 01       	movw	r18, r12
 396:	ad ec       	ldi	r26, 0xCD	; 205
 398:	bc ec       	ldi	r27, 0xCC	; 204
 39a:	0e 94 0c 05 	call	0xa18	; 0xa18 <__umulhisi3>
 39e:	ac 01       	movw	r20, r24
 3a0:	56 95       	lsr	r21
 3a2:	47 95       	ror	r20
 3a4:	56 95       	lsr	r21
 3a6:	47 95       	ror	r20
 3a8:	56 95       	lsr	r21
 3aa:	47 95       	ror	r20
 3ac:	80 e3       	ldi	r24, 0x30	; 48
 3ae:	84 0f       	add	r24, r20
 3b0:	88 83       	st	Y, r24
		lista[1] = '0' + (int_part % 10);
 3b2:	ca 01       	movw	r24, r20
 3b4:	88 0f       	add	r24, r24
 3b6:	99 1f       	adc	r25, r25
 3b8:	44 0f       	add	r20, r20
 3ba:	55 1f       	adc	r21, r21
 3bc:	44 0f       	add	r20, r20
 3be:	55 1f       	adc	r21, r21
 3c0:	44 0f       	add	r20, r20
 3c2:	55 1f       	adc	r21, r21
 3c4:	48 0f       	add	r20, r24
 3c6:	59 1f       	adc	r21, r25
 3c8:	c6 01       	movw	r24, r12
 3ca:	84 1b       	sub	r24, r20
 3cc:	95 0b       	sbc	r25, r21
 3ce:	80 5d       	subi	r24, 0xD0	; 208
 3d0:	89 83       	std	Y+1, r24	; 0x01
		lista[2] = '.';
 3d2:	8e e2       	ldi	r24, 0x2E	; 46
 3d4:	8a 83       	std	Y+2, r24	; 0x02
		lista[3] = '0' + (dec_part / 10);
 3d6:	94 01       	movw	r18, r8
 3d8:	0e 94 0c 05 	call	0xa18	; 0xa18 <__umulhisi3>
 3dc:	ac 01       	movw	r20, r24
 3de:	56 95       	lsr	r21
 3e0:	47 95       	ror	r20
 3e2:	56 95       	lsr	r21
 3e4:	47 95       	ror	r20
 3e6:	56 95       	lsr	r21
 3e8:	47 95       	ror	r20
 3ea:	80 e3       	ldi	r24, 0x30	; 48
 3ec:	84 0f       	add	r24, r20
 3ee:	8b 83       	std	Y+3, r24	; 0x03
		lista[4] = '0' + (dec_part % 10);
 3f0:	ca 01       	movw	r24, r20
 3f2:	88 0f       	add	r24, r24
 3f4:	99 1f       	adc	r25, r25
 3f6:	44 0f       	add	r20, r20
 3f8:	55 1f       	adc	r21, r21
 3fa:	44 0f       	add	r20, r20
 3fc:	55 1f       	adc	r21, r21
 3fe:	44 0f       	add	r20, r20
 400:	55 1f       	adc	r21, r21
 402:	48 0f       	add	r20, r24
 404:	59 1f       	adc	r21, r25
 406:	c4 01       	movw	r24, r8
 408:	84 1b       	sub	r24, r20
 40a:	95 0b       	sbc	r25, r21
 40c:	80 5d       	subi	r24, 0xD0	; 208
 40e:	8c 83       	std	Y+4, r24	; 0x04
		lista[5] = 'V';
 410:	86 e5       	ldi	r24, 0x56	; 86
 412:	8d 83       	std	Y+5, r24	; 0x05
		lista[6] = '\0';
 414:	1e 82       	std	Y+6, r1	; 0x06
	}
}
 416:	df 91       	pop	r29
 418:	cf 91       	pop	r28
 41a:	1f 91       	pop	r17
 41c:	0f 91       	pop	r16
 41e:	ff 90       	pop	r15
 420:	ef 90       	pop	r14
 422:	df 90       	pop	r13
 424:	cf 90       	pop	r12
 426:	bf 90       	pop	r11
 428:	af 90       	pop	r10
 42a:	9f 90       	pop	r9
 42c:	8f 90       	pop	r8
 42e:	08 95       	ret

00000430 <actualizarLista>:

// Función para actualizar una cadena con un valor de 3 dígitos
void actualizarLista(char *lista, int valor) {
 430:	cf 93       	push	r28
 432:	df 93       	push	r29
 434:	fc 01       	movw	r30, r24
 436:	9b 01       	movw	r18, r22
	lista[0] = '0' + (valor / 100);
 438:	cb 01       	movw	r24, r22
 43a:	64 e6       	ldi	r22, 0x64	; 100
 43c:	70 e0       	ldi	r23, 0x00	; 0
 43e:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <__divmodhi4>
 442:	60 5d       	subi	r22, 0xD0	; 208
 444:	60 83       	st	Z, r22
	lista[1] = '0' + ((valor / 10) % 10);
 446:	ca e0       	ldi	r28, 0x0A	; 10
 448:	d0 e0       	ldi	r29, 0x00	; 0
 44a:	c9 01       	movw	r24, r18
 44c:	be 01       	movw	r22, r28
 44e:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <__divmodhi4>
 452:	28 2f       	mov	r18, r24
 454:	cb 01       	movw	r24, r22
 456:	be 01       	movw	r22, r28
 458:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <__divmodhi4>
 45c:	80 5d       	subi	r24, 0xD0	; 208
 45e:	81 83       	std	Z+1, r24	; 0x01
	lista[2] = '0' + (valor % 10);
 460:	20 5d       	subi	r18, 0xD0	; 208
 462:	22 83       	std	Z+2, r18	; 0x02
	lista[3] = '\0';
 464:	13 82       	std	Z+3, r1	; 0x03
}
 466:	df 91       	pop	r29
 468:	cf 91       	pop	r28
 46a:	08 95       	ret

0000046c <actualizarLCD>:


// Función para actualizar la pantalla LCD
void actualizarLCD(void) {
	Lcd_Clear();  // Limpiar pantalla
 46c:	0e 94 0b 01 	call	0x216	; 0x216 <Lcd_Clear>
	Lcd_Set_Cursor(0, 1);
 470:	61 e0       	ldi	r22, 0x01	; 1
 472:	80 e0       	ldi	r24, 0x00	; 0
 474:	0e 94 0f 01 	call	0x21e	; 0x21e <Lcd_Set_Cursor>
	Lcd_Write_String("S1:");  // Escribir etiqueta de Sensor 1
 478:	84 e0       	ldi	r24, 0x04	; 4
 47a:	91 e0       	ldi	r25, 0x01	; 1
 47c:	0e 94 35 01 	call	0x26a	; 0x26a <Lcd_Write_String>
	Lcd_Set_Cursor(0, 7);
 480:	67 e0       	ldi	r22, 0x07	; 7
 482:	80 e0       	ldi	r24, 0x00	; 0
 484:	0e 94 0f 01 	call	0x21e	; 0x21e <Lcd_Set_Cursor>
	Lcd_Write_String("S2:");  // Escribir etiqueta de Sensor 2
 488:	88 e0       	ldi	r24, 0x08	; 8
 48a:	91 e0       	ldi	r25, 0x01	; 1
 48c:	0e 94 35 01 	call	0x26a	; 0x26a <Lcd_Write_String>
	Lcd_Set_Cursor(0, 13);
 490:	6d e0       	ldi	r22, 0x0D	; 13
 492:	80 e0       	ldi	r24, 0x00	; 0
 494:	0e 94 0f 01 	call	0x21e	; 0x21e <Lcd_Set_Cursor>
	Lcd_Write_String("S3:");  // Escribir etiqueta de Sensor 3
 498:	8c e0       	ldi	r24, 0x0C	; 12
 49a:	91 e0       	ldi	r25, 0x01	; 1
 49c:	0e 94 35 01 	call	0x26a	; 0x26a <Lcd_Write_String>
	// Actualizar las cadenas con los valores actuales
	actualizarVoltaje(lista1, Val1);
 4a0:	60 91 15 01 	lds	r22, 0x0115	; 0x800115 <Val1>
 4a4:	86 e1       	ldi	r24, 0x16	; 22
 4a6:	91 e0       	ldi	r25, 0x01	; 1
 4a8:	0e 94 66 01 	call	0x2cc	; 0x2cc <actualizarVoltaje>
	actualizarVoltaje(lista2, Val2);
 4ac:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <Val2>
 4b0:	8e e1       	ldi	r24, 0x1E	; 30
 4b2:	91 e0       	ldi	r25, 0x01	; 1
 4b4:	0e 94 66 01 	call	0x2cc	; 0x2cc <actualizarVoltaje>
	actualizarLista(lista3, contador);
 4b8:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <contador>
 4bc:	70 e0       	ldi	r23, 0x00	; 0
 4be:	80 e0       	ldi	r24, 0x00	; 0
 4c0:	91 e0       	ldi	r25, 0x01	; 1
 4c2:	0e 94 18 02 	call	0x430	; 0x430 <actualizarLista>

	// Mostrar los valores en la LCD
	Lcd_Set_Cursor(1, 1);
 4c6:	61 e0       	ldi	r22, 0x01	; 1
 4c8:	81 e0       	ldi	r24, 0x01	; 1
 4ca:	0e 94 0f 01 	call	0x21e	; 0x21e <Lcd_Set_Cursor>
	Lcd_Write_String(lista1);
 4ce:	86 e1       	ldi	r24, 0x16	; 22
 4d0:	91 e0       	ldi	r25, 0x01	; 1
 4d2:	0e 94 35 01 	call	0x26a	; 0x26a <Lcd_Write_String>
	Lcd_Set_Cursor(1, 7);
 4d6:	67 e0       	ldi	r22, 0x07	; 7
 4d8:	81 e0       	ldi	r24, 0x01	; 1
 4da:	0e 94 0f 01 	call	0x21e	; 0x21e <Lcd_Set_Cursor>
	Lcd_Write_String(lista2);
 4de:	8e e1       	ldi	r24, 0x1E	; 30
 4e0:	91 e0       	ldi	r25, 0x01	; 1
 4e2:	0e 94 35 01 	call	0x26a	; 0x26a <Lcd_Write_String>
	Lcd_Set_Cursor(1, 13);
 4e6:	6d e0       	ldi	r22, 0x0D	; 13
 4e8:	81 e0       	ldi	r24, 0x01	; 1
 4ea:	0e 94 0f 01 	call	0x21e	; 0x21e <Lcd_Set_Cursor>
	Lcd_Write_String(lista3);
 4ee:	80 e0       	ldi	r24, 0x00	; 0
 4f0:	91 e0       	ldi	r25, 0x01	; 1
 4f2:	0e 94 35 01 	call	0x26a	; 0x26a <Lcd_Write_String>
 4f6:	08 95       	ret

000004f8 <main>:
}

// Función principal
int main(void) {
	setup();  // Configuración inicial del sistema
 4f8:	0e 94 4b 01 	call	0x296	; 0x296 <setup>
	
	// Variables para guardar los valores anteriores
	uint8_t prevVal1 = 255, prevVal2 = 255, prevContador = 255;
 4fc:	1f ef       	ldi	r17, 0xFF	; 255
 4fe:	df ef       	ldi	r29, 0xFF	; 255
 500:	cf ef       	ldi	r28, 0xFF	; 255

	while (1) {
		// Verificar si hay cambios en los valores del ADC o el contador
		if ((Val1 != prevVal1) || (Val2 != prevVal2) || (contador != prevContador) || updateLCD) {
 502:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <Val1>
 506:	c8 13       	cpse	r28, r24
 508:	0c c0       	rjmp	.+24     	; 0x522 <main+0x2a>
 50a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <Val2>
 50e:	d8 13       	cpse	r29, r24
 510:	08 c0       	rjmp	.+16     	; 0x522 <main+0x2a>
 512:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <contador>
 516:	18 13       	cpse	r17, r24
 518:	04 c0       	rjmp	.+8      	; 0x522 <main+0x2a>
 51a:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <updateLCD>
 51e:	88 23       	and	r24, r24
 520:	61 f0       	breq	.+24     	; 0x53a <main+0x42>
			actualizarLCD();  // Actualizar la pantalla LCD
 522:	0e 94 36 02 	call	0x46c	; 0x46c <actualizarLCD>
			// Guardar los valores actuales como anteriores
			prevVal1 = Val1;
 526:	c0 91 15 01 	lds	r28, 0x0115	; 0x800115 <Val1>
			prevVal2 = Val2;
 52a:	d0 91 14 01 	lds	r29, 0x0114	; 0x800114 <Val2>
			prevContador = contador;
 52e:	10 91 12 01 	lds	r17, 0x0112	; 0x800112 <contador>
			adcUpdated = 0;
 532:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__data_end>
			updateLCD = 0;
 536:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <updateLCD>
		}

		// Actualizar las cadenas con los valores actuales
		actualizarVoltaje(lista1, Val1);
 53a:	60 91 15 01 	lds	r22, 0x0115	; 0x800115 <Val1>
 53e:	86 e1       	ldi	r24, 0x16	; 22
 540:	91 e0       	ldi	r25, 0x01	; 1
 542:	0e 94 66 01 	call	0x2cc	; 0x2cc <actualizarVoltaje>
		actualizarVoltaje(lista2, Val2);
 546:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <Val2>
 54a:	8e e1       	ldi	r24, 0x1E	; 30
 54c:	91 e0       	ldi	r25, 0x01	; 1
 54e:	0e 94 66 01 	call	0x2cc	; 0x2cc <actualizarVoltaje>
		actualizarLista(lista3, contador);
 552:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <contador>
 556:	70 e0       	ldi	r23, 0x00	; 0
 558:	80 e0       	ldi	r24, 0x00	; 0
 55a:	91 e0       	ldi	r25, 0x01	; 1
 55c:	0e 94 18 02 	call	0x430	; 0x430 <actualizarLista>
 560:	2f ef       	ldi	r18, 0xFF	; 255
 562:	81 ee       	ldi	r24, 0xE1	; 225
 564:	94 e0       	ldi	r25, 0x04	; 4
 566:	21 50       	subi	r18, 0x01	; 1
 568:	80 40       	sbci	r24, 0x00	; 0
 56a:	90 40       	sbci	r25, 0x00	; 0
 56c:	e1 f7       	brne	.-8      	; 0x566 <main+0x6e>
 56e:	00 c0       	rjmp	.+0      	; 0x570 <main+0x78>
 570:	00 00       	nop
 572:	c7 cf       	rjmp	.-114    	; 0x502 <main+0xa>

00000574 <__vector_21>:
		_delay_ms(100);  // Esperar 100ms
	}
}

// Interrupción del ADC
ISR(ADC_vect) {
 574:	1f 92       	push	r1
 576:	0f 92       	push	r0
 578:	0f b6       	in	r0, 0x3f	; 63
 57a:	0f 92       	push	r0
 57c:	11 24       	eor	r1, r1
 57e:	8f 93       	push	r24
 580:	ef 93       	push	r30
 582:	ff 93       	push	r31
	if (caso == 0) {
 584:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <caso>
 588:	81 11       	cpse	r24, r1
 58a:	0d c0       	rjmp	.+26     	; 0x5a6 <__vector_21+0x32>
		ADMUX &= ~((1 << MUX2) | (1 << MUX1) | (1 << MUX0)); // Seleccionar canal ADC0
 58c:	ec e7       	ldi	r30, 0x7C	; 124
 58e:	f0 e0       	ldi	r31, 0x00	; 0
 590:	80 81       	ld	r24, Z
 592:	88 7f       	andi	r24, 0xF8	; 248
 594:	80 83       	st	Z, r24
		Val1 = ADCH;  // Leer valor alto del ADC
 596:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 59a:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <Val1>
		caso = 1;  // Cambiar a caso 1
 59e:	81 e0       	ldi	r24, 0x01	; 1
 5a0:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <caso>
 5a4:	0c c0       	rjmp	.+24     	; 0x5be <__vector_21+0x4a>
		} else {
		ADMUX = (ADMUX & ~((1 << MUX2) | (1 << MUX1) | (1 << MUX0))) | (1 << MUX0); // Seleccionar canal ADC1
 5a6:	ec e7       	ldi	r30, 0x7C	; 124
 5a8:	f0 e0       	ldi	r31, 0x00	; 0
 5aa:	80 81       	ld	r24, Z
 5ac:	88 7f       	andi	r24, 0xF8	; 248
 5ae:	81 60       	ori	r24, 0x01	; 1
 5b0:	80 83       	st	Z, r24
		Val2 = ADCH;  // Leer valor alto del ADC
 5b2:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 5b6:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <Val2>
		caso = 0;  // Cambiar a caso 0
 5ba:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <caso>
	}
	ADCSRA |= (1 << ADSC);  // Iniciar la próxima conversión ADC
 5be:	ea e7       	ldi	r30, 0x7A	; 122
 5c0:	f0 e0       	ldi	r31, 0x00	; 0
 5c2:	80 81       	ld	r24, Z
 5c4:	80 64       	ori	r24, 0x40	; 64
 5c6:	80 83       	st	Z, r24
	adcUpdated = 1; // Indicar que se debe actualizar la LCD
 5c8:	81 e0       	ldi	r24, 0x01	; 1
 5ca:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
}
 5ce:	ff 91       	pop	r31
 5d0:	ef 91       	pop	r30
 5d2:	8f 91       	pop	r24
 5d4:	0f 90       	pop	r0
 5d6:	0f be       	out	0x3f, r0	; 63
 5d8:	0f 90       	pop	r0
 5da:	1f 90       	pop	r1
 5dc:	18 95       	reti

000005de <__subsf3>:
 5de:	50 58       	subi	r21, 0x80	; 128

000005e0 <__addsf3>:
 5e0:	bb 27       	eor	r27, r27
 5e2:	aa 27       	eor	r26, r26
 5e4:	0e 94 07 03 	call	0x60e	; 0x60e <__addsf3x>
 5e8:	0c 94 51 04 	jmp	0x8a2	; 0x8a2 <__fp_round>
 5ec:	0e 94 43 04 	call	0x886	; 0x886 <__fp_pscA>
 5f0:	38 f0       	brcs	.+14     	; 0x600 <__addsf3+0x20>
 5f2:	0e 94 4a 04 	call	0x894	; 0x894 <__fp_pscB>
 5f6:	20 f0       	brcs	.+8      	; 0x600 <__addsf3+0x20>
 5f8:	39 f4       	brne	.+14     	; 0x608 <__addsf3+0x28>
 5fa:	9f 3f       	cpi	r25, 0xFF	; 255
 5fc:	19 f4       	brne	.+6      	; 0x604 <__addsf3+0x24>
 5fe:	26 f4       	brtc	.+8      	; 0x608 <__addsf3+0x28>
 600:	0c 94 40 04 	jmp	0x880	; 0x880 <__fp_nan>
 604:	0e f4       	brtc	.+2      	; 0x608 <__addsf3+0x28>
 606:	e0 95       	com	r30
 608:	e7 fb       	bst	r30, 7
 60a:	0c 94 3a 04 	jmp	0x874	; 0x874 <__fp_inf>

0000060e <__addsf3x>:
 60e:	e9 2f       	mov	r30, r25
 610:	0e 94 62 04 	call	0x8c4	; 0x8c4 <__fp_split3>
 614:	58 f3       	brcs	.-42     	; 0x5ec <__addsf3+0xc>
 616:	ba 17       	cp	r27, r26
 618:	62 07       	cpc	r22, r18
 61a:	73 07       	cpc	r23, r19
 61c:	84 07       	cpc	r24, r20
 61e:	95 07       	cpc	r25, r21
 620:	20 f0       	brcs	.+8      	; 0x62a <__addsf3x+0x1c>
 622:	79 f4       	brne	.+30     	; 0x642 <__addsf3x+0x34>
 624:	a6 f5       	brtc	.+104    	; 0x68e <__addsf3x+0x80>
 626:	0c 94 84 04 	jmp	0x908	; 0x908 <__fp_zero>
 62a:	0e f4       	brtc	.+2      	; 0x62e <__addsf3x+0x20>
 62c:	e0 95       	com	r30
 62e:	0b 2e       	mov	r0, r27
 630:	ba 2f       	mov	r27, r26
 632:	a0 2d       	mov	r26, r0
 634:	0b 01       	movw	r0, r22
 636:	b9 01       	movw	r22, r18
 638:	90 01       	movw	r18, r0
 63a:	0c 01       	movw	r0, r24
 63c:	ca 01       	movw	r24, r20
 63e:	a0 01       	movw	r20, r0
 640:	11 24       	eor	r1, r1
 642:	ff 27       	eor	r31, r31
 644:	59 1b       	sub	r21, r25
 646:	99 f0       	breq	.+38     	; 0x66e <__addsf3x+0x60>
 648:	59 3f       	cpi	r21, 0xF9	; 249
 64a:	50 f4       	brcc	.+20     	; 0x660 <__addsf3x+0x52>
 64c:	50 3e       	cpi	r21, 0xE0	; 224
 64e:	68 f1       	brcs	.+90     	; 0x6aa <__addsf3x+0x9c>
 650:	1a 16       	cp	r1, r26
 652:	f0 40       	sbci	r31, 0x00	; 0
 654:	a2 2f       	mov	r26, r18
 656:	23 2f       	mov	r18, r19
 658:	34 2f       	mov	r19, r20
 65a:	44 27       	eor	r20, r20
 65c:	58 5f       	subi	r21, 0xF8	; 248
 65e:	f3 cf       	rjmp	.-26     	; 0x646 <__addsf3x+0x38>
 660:	46 95       	lsr	r20
 662:	37 95       	ror	r19
 664:	27 95       	ror	r18
 666:	a7 95       	ror	r26
 668:	f0 40       	sbci	r31, 0x00	; 0
 66a:	53 95       	inc	r21
 66c:	c9 f7       	brne	.-14     	; 0x660 <__addsf3x+0x52>
 66e:	7e f4       	brtc	.+30     	; 0x68e <__addsf3x+0x80>
 670:	1f 16       	cp	r1, r31
 672:	ba 0b       	sbc	r27, r26
 674:	62 0b       	sbc	r22, r18
 676:	73 0b       	sbc	r23, r19
 678:	84 0b       	sbc	r24, r20
 67a:	ba f0       	brmi	.+46     	; 0x6aa <__addsf3x+0x9c>
 67c:	91 50       	subi	r25, 0x01	; 1
 67e:	a1 f0       	breq	.+40     	; 0x6a8 <__addsf3x+0x9a>
 680:	ff 0f       	add	r31, r31
 682:	bb 1f       	adc	r27, r27
 684:	66 1f       	adc	r22, r22
 686:	77 1f       	adc	r23, r23
 688:	88 1f       	adc	r24, r24
 68a:	c2 f7       	brpl	.-16     	; 0x67c <__addsf3x+0x6e>
 68c:	0e c0       	rjmp	.+28     	; 0x6aa <__addsf3x+0x9c>
 68e:	ba 0f       	add	r27, r26
 690:	62 1f       	adc	r22, r18
 692:	73 1f       	adc	r23, r19
 694:	84 1f       	adc	r24, r20
 696:	48 f4       	brcc	.+18     	; 0x6aa <__addsf3x+0x9c>
 698:	87 95       	ror	r24
 69a:	77 95       	ror	r23
 69c:	67 95       	ror	r22
 69e:	b7 95       	ror	r27
 6a0:	f7 95       	ror	r31
 6a2:	9e 3f       	cpi	r25, 0xFE	; 254
 6a4:	08 f0       	brcs	.+2      	; 0x6a8 <__addsf3x+0x9a>
 6a6:	b0 cf       	rjmp	.-160    	; 0x608 <__addsf3+0x28>
 6a8:	93 95       	inc	r25
 6aa:	88 0f       	add	r24, r24
 6ac:	08 f0       	brcs	.+2      	; 0x6b0 <__addsf3x+0xa2>
 6ae:	99 27       	eor	r25, r25
 6b0:	ee 0f       	add	r30, r30
 6b2:	97 95       	ror	r25
 6b4:	87 95       	ror	r24
 6b6:	08 95       	ret

000006b8 <__divsf3>:
 6b8:	0e 94 70 03 	call	0x6e0	; 0x6e0 <__divsf3x>
 6bc:	0c 94 51 04 	jmp	0x8a2	; 0x8a2 <__fp_round>
 6c0:	0e 94 4a 04 	call	0x894	; 0x894 <__fp_pscB>
 6c4:	58 f0       	brcs	.+22     	; 0x6dc <__divsf3+0x24>
 6c6:	0e 94 43 04 	call	0x886	; 0x886 <__fp_pscA>
 6ca:	40 f0       	brcs	.+16     	; 0x6dc <__divsf3+0x24>
 6cc:	29 f4       	brne	.+10     	; 0x6d8 <__divsf3+0x20>
 6ce:	5f 3f       	cpi	r21, 0xFF	; 255
 6d0:	29 f0       	breq	.+10     	; 0x6dc <__divsf3+0x24>
 6d2:	0c 94 3a 04 	jmp	0x874	; 0x874 <__fp_inf>
 6d6:	51 11       	cpse	r21, r1
 6d8:	0c 94 85 04 	jmp	0x90a	; 0x90a <__fp_szero>
 6dc:	0c 94 40 04 	jmp	0x880	; 0x880 <__fp_nan>

000006e0 <__divsf3x>:
 6e0:	0e 94 62 04 	call	0x8c4	; 0x8c4 <__fp_split3>
 6e4:	68 f3       	brcs	.-38     	; 0x6c0 <__divsf3+0x8>

000006e6 <__divsf3_pse>:
 6e6:	99 23       	and	r25, r25
 6e8:	b1 f3       	breq	.-20     	; 0x6d6 <__divsf3+0x1e>
 6ea:	55 23       	and	r21, r21
 6ec:	91 f3       	breq	.-28     	; 0x6d2 <__divsf3+0x1a>
 6ee:	95 1b       	sub	r25, r21
 6f0:	55 0b       	sbc	r21, r21
 6f2:	bb 27       	eor	r27, r27
 6f4:	aa 27       	eor	r26, r26
 6f6:	62 17       	cp	r22, r18
 6f8:	73 07       	cpc	r23, r19
 6fa:	84 07       	cpc	r24, r20
 6fc:	38 f0       	brcs	.+14     	; 0x70c <__divsf3_pse+0x26>
 6fe:	9f 5f       	subi	r25, 0xFF	; 255
 700:	5f 4f       	sbci	r21, 0xFF	; 255
 702:	22 0f       	add	r18, r18
 704:	33 1f       	adc	r19, r19
 706:	44 1f       	adc	r20, r20
 708:	aa 1f       	adc	r26, r26
 70a:	a9 f3       	breq	.-22     	; 0x6f6 <__divsf3_pse+0x10>
 70c:	35 d0       	rcall	.+106    	; 0x778 <__divsf3_pse+0x92>
 70e:	0e 2e       	mov	r0, r30
 710:	3a f0       	brmi	.+14     	; 0x720 <__divsf3_pse+0x3a>
 712:	e0 e8       	ldi	r30, 0x80	; 128
 714:	32 d0       	rcall	.+100    	; 0x77a <__divsf3_pse+0x94>
 716:	91 50       	subi	r25, 0x01	; 1
 718:	50 40       	sbci	r21, 0x00	; 0
 71a:	e6 95       	lsr	r30
 71c:	00 1c       	adc	r0, r0
 71e:	ca f7       	brpl	.-14     	; 0x712 <__divsf3_pse+0x2c>
 720:	2b d0       	rcall	.+86     	; 0x778 <__divsf3_pse+0x92>
 722:	fe 2f       	mov	r31, r30
 724:	29 d0       	rcall	.+82     	; 0x778 <__divsf3_pse+0x92>
 726:	66 0f       	add	r22, r22
 728:	77 1f       	adc	r23, r23
 72a:	88 1f       	adc	r24, r24
 72c:	bb 1f       	adc	r27, r27
 72e:	26 17       	cp	r18, r22
 730:	37 07       	cpc	r19, r23
 732:	48 07       	cpc	r20, r24
 734:	ab 07       	cpc	r26, r27
 736:	b0 e8       	ldi	r27, 0x80	; 128
 738:	09 f0       	breq	.+2      	; 0x73c <__divsf3_pse+0x56>
 73a:	bb 0b       	sbc	r27, r27
 73c:	80 2d       	mov	r24, r0
 73e:	bf 01       	movw	r22, r30
 740:	ff 27       	eor	r31, r31
 742:	93 58       	subi	r25, 0x83	; 131
 744:	5f 4f       	sbci	r21, 0xFF	; 255
 746:	3a f0       	brmi	.+14     	; 0x756 <__divsf3_pse+0x70>
 748:	9e 3f       	cpi	r25, 0xFE	; 254
 74a:	51 05       	cpc	r21, r1
 74c:	78 f0       	brcs	.+30     	; 0x76c <__divsf3_pse+0x86>
 74e:	0c 94 3a 04 	jmp	0x874	; 0x874 <__fp_inf>
 752:	0c 94 85 04 	jmp	0x90a	; 0x90a <__fp_szero>
 756:	5f 3f       	cpi	r21, 0xFF	; 255
 758:	e4 f3       	brlt	.-8      	; 0x752 <__divsf3_pse+0x6c>
 75a:	98 3e       	cpi	r25, 0xE8	; 232
 75c:	d4 f3       	brlt	.-12     	; 0x752 <__divsf3_pse+0x6c>
 75e:	86 95       	lsr	r24
 760:	77 95       	ror	r23
 762:	67 95       	ror	r22
 764:	b7 95       	ror	r27
 766:	f7 95       	ror	r31
 768:	9f 5f       	subi	r25, 0xFF	; 255
 76a:	c9 f7       	brne	.-14     	; 0x75e <__divsf3_pse+0x78>
 76c:	88 0f       	add	r24, r24
 76e:	91 1d       	adc	r25, r1
 770:	96 95       	lsr	r25
 772:	87 95       	ror	r24
 774:	97 f9       	bld	r25, 7
 776:	08 95       	ret
 778:	e1 e0       	ldi	r30, 0x01	; 1
 77a:	66 0f       	add	r22, r22
 77c:	77 1f       	adc	r23, r23
 77e:	88 1f       	adc	r24, r24
 780:	bb 1f       	adc	r27, r27
 782:	62 17       	cp	r22, r18
 784:	73 07       	cpc	r23, r19
 786:	84 07       	cpc	r24, r20
 788:	ba 07       	cpc	r27, r26
 78a:	20 f0       	brcs	.+8      	; 0x794 <__divsf3_pse+0xae>
 78c:	62 1b       	sub	r22, r18
 78e:	73 0b       	sbc	r23, r19
 790:	84 0b       	sbc	r24, r20
 792:	ba 0b       	sbc	r27, r26
 794:	ee 1f       	adc	r30, r30
 796:	88 f7       	brcc	.-30     	; 0x77a <__divsf3_pse+0x94>
 798:	e0 95       	com	r30
 79a:	08 95       	ret

0000079c <__fixunssfsi>:
 79c:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <__fp_splitA>
 7a0:	88 f0       	brcs	.+34     	; 0x7c4 <__fixunssfsi+0x28>
 7a2:	9f 57       	subi	r25, 0x7F	; 127
 7a4:	98 f0       	brcs	.+38     	; 0x7cc <__fixunssfsi+0x30>
 7a6:	b9 2f       	mov	r27, r25
 7a8:	99 27       	eor	r25, r25
 7aa:	b7 51       	subi	r27, 0x17	; 23
 7ac:	b0 f0       	brcs	.+44     	; 0x7da <__fixunssfsi+0x3e>
 7ae:	e1 f0       	breq	.+56     	; 0x7e8 <__fixunssfsi+0x4c>
 7b0:	66 0f       	add	r22, r22
 7b2:	77 1f       	adc	r23, r23
 7b4:	88 1f       	adc	r24, r24
 7b6:	99 1f       	adc	r25, r25
 7b8:	1a f0       	brmi	.+6      	; 0x7c0 <__fixunssfsi+0x24>
 7ba:	ba 95       	dec	r27
 7bc:	c9 f7       	brne	.-14     	; 0x7b0 <__fixunssfsi+0x14>
 7be:	14 c0       	rjmp	.+40     	; 0x7e8 <__fixunssfsi+0x4c>
 7c0:	b1 30       	cpi	r27, 0x01	; 1
 7c2:	91 f0       	breq	.+36     	; 0x7e8 <__fixunssfsi+0x4c>
 7c4:	0e 94 84 04 	call	0x908	; 0x908 <__fp_zero>
 7c8:	b1 e0       	ldi	r27, 0x01	; 1
 7ca:	08 95       	ret
 7cc:	0c 94 84 04 	jmp	0x908	; 0x908 <__fp_zero>
 7d0:	67 2f       	mov	r22, r23
 7d2:	78 2f       	mov	r23, r24
 7d4:	88 27       	eor	r24, r24
 7d6:	b8 5f       	subi	r27, 0xF8	; 248
 7d8:	39 f0       	breq	.+14     	; 0x7e8 <__fixunssfsi+0x4c>
 7da:	b9 3f       	cpi	r27, 0xF9	; 249
 7dc:	cc f3       	brlt	.-14     	; 0x7d0 <__fixunssfsi+0x34>
 7de:	86 95       	lsr	r24
 7e0:	77 95       	ror	r23
 7e2:	67 95       	ror	r22
 7e4:	b3 95       	inc	r27
 7e6:	d9 f7       	brne	.-10     	; 0x7de <__fixunssfsi+0x42>
 7e8:	3e f4       	brtc	.+14     	; 0x7f8 <__fixunssfsi+0x5c>
 7ea:	90 95       	com	r25
 7ec:	80 95       	com	r24
 7ee:	70 95       	com	r23
 7f0:	61 95       	neg	r22
 7f2:	7f 4f       	sbci	r23, 0xFF	; 255
 7f4:	8f 4f       	sbci	r24, 0xFF	; 255
 7f6:	9f 4f       	sbci	r25, 0xFF	; 255
 7f8:	08 95       	ret

000007fa <__floatunsisf>:
 7fa:	e8 94       	clt
 7fc:	09 c0       	rjmp	.+18     	; 0x810 <__DATA_REGION_LENGTH__+0x10>

000007fe <__floatsisf>:
 7fe:	97 fb       	bst	r25, 7
 800:	3e f4       	brtc	.+14     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 802:	90 95       	com	r25
 804:	80 95       	com	r24
 806:	70 95       	com	r23
 808:	61 95       	neg	r22
 80a:	7f 4f       	sbci	r23, 0xFF	; 255
 80c:	8f 4f       	sbci	r24, 0xFF	; 255
 80e:	9f 4f       	sbci	r25, 0xFF	; 255
 810:	99 23       	and	r25, r25
 812:	a9 f0       	breq	.+42     	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
 814:	f9 2f       	mov	r31, r25
 816:	96 e9       	ldi	r25, 0x96	; 150
 818:	bb 27       	eor	r27, r27
 81a:	93 95       	inc	r25
 81c:	f6 95       	lsr	r31
 81e:	87 95       	ror	r24
 820:	77 95       	ror	r23
 822:	67 95       	ror	r22
 824:	b7 95       	ror	r27
 826:	f1 11       	cpse	r31, r1
 828:	f8 cf       	rjmp	.-16     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 82a:	fa f4       	brpl	.+62     	; 0x86a <__DATA_REGION_LENGTH__+0x6a>
 82c:	bb 0f       	add	r27, r27
 82e:	11 f4       	brne	.+4      	; 0x834 <__DATA_REGION_LENGTH__+0x34>
 830:	60 ff       	sbrs	r22, 0
 832:	1b c0       	rjmp	.+54     	; 0x86a <__DATA_REGION_LENGTH__+0x6a>
 834:	6f 5f       	subi	r22, 0xFF	; 255
 836:	7f 4f       	sbci	r23, 0xFF	; 255
 838:	8f 4f       	sbci	r24, 0xFF	; 255
 83a:	9f 4f       	sbci	r25, 0xFF	; 255
 83c:	16 c0       	rjmp	.+44     	; 0x86a <__DATA_REGION_LENGTH__+0x6a>
 83e:	88 23       	and	r24, r24
 840:	11 f0       	breq	.+4      	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 842:	96 e9       	ldi	r25, 0x96	; 150
 844:	11 c0       	rjmp	.+34     	; 0x868 <__DATA_REGION_LENGTH__+0x68>
 846:	77 23       	and	r23, r23
 848:	21 f0       	breq	.+8      	; 0x852 <__DATA_REGION_LENGTH__+0x52>
 84a:	9e e8       	ldi	r25, 0x8E	; 142
 84c:	87 2f       	mov	r24, r23
 84e:	76 2f       	mov	r23, r22
 850:	05 c0       	rjmp	.+10     	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
 852:	66 23       	and	r22, r22
 854:	71 f0       	breq	.+28     	; 0x872 <__DATA_REGION_LENGTH__+0x72>
 856:	96 e8       	ldi	r25, 0x86	; 134
 858:	86 2f       	mov	r24, r22
 85a:	70 e0       	ldi	r23, 0x00	; 0
 85c:	60 e0       	ldi	r22, 0x00	; 0
 85e:	2a f0       	brmi	.+10     	; 0x86a <__DATA_REGION_LENGTH__+0x6a>
 860:	9a 95       	dec	r25
 862:	66 0f       	add	r22, r22
 864:	77 1f       	adc	r23, r23
 866:	88 1f       	adc	r24, r24
 868:	da f7       	brpl	.-10     	; 0x860 <__DATA_REGION_LENGTH__+0x60>
 86a:	88 0f       	add	r24, r24
 86c:	96 95       	lsr	r25
 86e:	87 95       	ror	r24
 870:	97 f9       	bld	r25, 7
 872:	08 95       	ret

00000874 <__fp_inf>:
 874:	97 f9       	bld	r25, 7
 876:	9f 67       	ori	r25, 0x7F	; 127
 878:	80 e8       	ldi	r24, 0x80	; 128
 87a:	70 e0       	ldi	r23, 0x00	; 0
 87c:	60 e0       	ldi	r22, 0x00	; 0
 87e:	08 95       	ret

00000880 <__fp_nan>:
 880:	9f ef       	ldi	r25, 0xFF	; 255
 882:	80 ec       	ldi	r24, 0xC0	; 192
 884:	08 95       	ret

00000886 <__fp_pscA>:
 886:	00 24       	eor	r0, r0
 888:	0a 94       	dec	r0
 88a:	16 16       	cp	r1, r22
 88c:	17 06       	cpc	r1, r23
 88e:	18 06       	cpc	r1, r24
 890:	09 06       	cpc	r0, r25
 892:	08 95       	ret

00000894 <__fp_pscB>:
 894:	00 24       	eor	r0, r0
 896:	0a 94       	dec	r0
 898:	12 16       	cp	r1, r18
 89a:	13 06       	cpc	r1, r19
 89c:	14 06       	cpc	r1, r20
 89e:	05 06       	cpc	r0, r21
 8a0:	08 95       	ret

000008a2 <__fp_round>:
 8a2:	09 2e       	mov	r0, r25
 8a4:	03 94       	inc	r0
 8a6:	00 0c       	add	r0, r0
 8a8:	11 f4       	brne	.+4      	; 0x8ae <__fp_round+0xc>
 8aa:	88 23       	and	r24, r24
 8ac:	52 f0       	brmi	.+20     	; 0x8c2 <__fp_round+0x20>
 8ae:	bb 0f       	add	r27, r27
 8b0:	40 f4       	brcc	.+16     	; 0x8c2 <__fp_round+0x20>
 8b2:	bf 2b       	or	r27, r31
 8b4:	11 f4       	brne	.+4      	; 0x8ba <__fp_round+0x18>
 8b6:	60 ff       	sbrs	r22, 0
 8b8:	04 c0       	rjmp	.+8      	; 0x8c2 <__fp_round+0x20>
 8ba:	6f 5f       	subi	r22, 0xFF	; 255
 8bc:	7f 4f       	sbci	r23, 0xFF	; 255
 8be:	8f 4f       	sbci	r24, 0xFF	; 255
 8c0:	9f 4f       	sbci	r25, 0xFF	; 255
 8c2:	08 95       	ret

000008c4 <__fp_split3>:
 8c4:	57 fd       	sbrc	r21, 7
 8c6:	90 58       	subi	r25, 0x80	; 128
 8c8:	44 0f       	add	r20, r20
 8ca:	55 1f       	adc	r21, r21
 8cc:	59 f0       	breq	.+22     	; 0x8e4 <__fp_splitA+0x10>
 8ce:	5f 3f       	cpi	r21, 0xFF	; 255
 8d0:	71 f0       	breq	.+28     	; 0x8ee <__fp_splitA+0x1a>
 8d2:	47 95       	ror	r20

000008d4 <__fp_splitA>:
 8d4:	88 0f       	add	r24, r24
 8d6:	97 fb       	bst	r25, 7
 8d8:	99 1f       	adc	r25, r25
 8da:	61 f0       	breq	.+24     	; 0x8f4 <__fp_splitA+0x20>
 8dc:	9f 3f       	cpi	r25, 0xFF	; 255
 8de:	79 f0       	breq	.+30     	; 0x8fe <__fp_splitA+0x2a>
 8e0:	87 95       	ror	r24
 8e2:	08 95       	ret
 8e4:	12 16       	cp	r1, r18
 8e6:	13 06       	cpc	r1, r19
 8e8:	14 06       	cpc	r1, r20
 8ea:	55 1f       	adc	r21, r21
 8ec:	f2 cf       	rjmp	.-28     	; 0x8d2 <__fp_split3+0xe>
 8ee:	46 95       	lsr	r20
 8f0:	f1 df       	rcall	.-30     	; 0x8d4 <__fp_splitA>
 8f2:	08 c0       	rjmp	.+16     	; 0x904 <__stack+0x5>
 8f4:	16 16       	cp	r1, r22
 8f6:	17 06       	cpc	r1, r23
 8f8:	18 06       	cpc	r1, r24
 8fa:	99 1f       	adc	r25, r25
 8fc:	f1 cf       	rjmp	.-30     	; 0x8e0 <__fp_splitA+0xc>
 8fe:	86 95       	lsr	r24
 900:	71 05       	cpc	r23, r1
 902:	61 05       	cpc	r22, r1
 904:	08 94       	sec
 906:	08 95       	ret

00000908 <__fp_zero>:
 908:	e8 94       	clt

0000090a <__fp_szero>:
 90a:	bb 27       	eor	r27, r27
 90c:	66 27       	eor	r22, r22
 90e:	77 27       	eor	r23, r23
 910:	cb 01       	movw	r24, r22
 912:	97 f9       	bld	r25, 7
 914:	08 95       	ret

00000916 <__mulsf3>:
 916:	0e 94 9e 04 	call	0x93c	; 0x93c <__mulsf3x>
 91a:	0c 94 51 04 	jmp	0x8a2	; 0x8a2 <__fp_round>
 91e:	0e 94 43 04 	call	0x886	; 0x886 <__fp_pscA>
 922:	38 f0       	brcs	.+14     	; 0x932 <__mulsf3+0x1c>
 924:	0e 94 4a 04 	call	0x894	; 0x894 <__fp_pscB>
 928:	20 f0       	brcs	.+8      	; 0x932 <__mulsf3+0x1c>
 92a:	95 23       	and	r25, r21
 92c:	11 f0       	breq	.+4      	; 0x932 <__mulsf3+0x1c>
 92e:	0c 94 3a 04 	jmp	0x874	; 0x874 <__fp_inf>
 932:	0c 94 40 04 	jmp	0x880	; 0x880 <__fp_nan>
 936:	11 24       	eor	r1, r1
 938:	0c 94 85 04 	jmp	0x90a	; 0x90a <__fp_szero>

0000093c <__mulsf3x>:
 93c:	0e 94 62 04 	call	0x8c4	; 0x8c4 <__fp_split3>
 940:	70 f3       	brcs	.-36     	; 0x91e <__mulsf3+0x8>

00000942 <__mulsf3_pse>:
 942:	95 9f       	mul	r25, r21
 944:	c1 f3       	breq	.-16     	; 0x936 <__mulsf3+0x20>
 946:	95 0f       	add	r25, r21
 948:	50 e0       	ldi	r21, 0x00	; 0
 94a:	55 1f       	adc	r21, r21
 94c:	62 9f       	mul	r22, r18
 94e:	f0 01       	movw	r30, r0
 950:	72 9f       	mul	r23, r18
 952:	bb 27       	eor	r27, r27
 954:	f0 0d       	add	r31, r0
 956:	b1 1d       	adc	r27, r1
 958:	63 9f       	mul	r22, r19
 95a:	aa 27       	eor	r26, r26
 95c:	f0 0d       	add	r31, r0
 95e:	b1 1d       	adc	r27, r1
 960:	aa 1f       	adc	r26, r26
 962:	64 9f       	mul	r22, r20
 964:	66 27       	eor	r22, r22
 966:	b0 0d       	add	r27, r0
 968:	a1 1d       	adc	r26, r1
 96a:	66 1f       	adc	r22, r22
 96c:	82 9f       	mul	r24, r18
 96e:	22 27       	eor	r18, r18
 970:	b0 0d       	add	r27, r0
 972:	a1 1d       	adc	r26, r1
 974:	62 1f       	adc	r22, r18
 976:	73 9f       	mul	r23, r19
 978:	b0 0d       	add	r27, r0
 97a:	a1 1d       	adc	r26, r1
 97c:	62 1f       	adc	r22, r18
 97e:	83 9f       	mul	r24, r19
 980:	a0 0d       	add	r26, r0
 982:	61 1d       	adc	r22, r1
 984:	22 1f       	adc	r18, r18
 986:	74 9f       	mul	r23, r20
 988:	33 27       	eor	r19, r19
 98a:	a0 0d       	add	r26, r0
 98c:	61 1d       	adc	r22, r1
 98e:	23 1f       	adc	r18, r19
 990:	84 9f       	mul	r24, r20
 992:	60 0d       	add	r22, r0
 994:	21 1d       	adc	r18, r1
 996:	82 2f       	mov	r24, r18
 998:	76 2f       	mov	r23, r22
 99a:	6a 2f       	mov	r22, r26
 99c:	11 24       	eor	r1, r1
 99e:	9f 57       	subi	r25, 0x7F	; 127
 9a0:	50 40       	sbci	r21, 0x00	; 0
 9a2:	9a f0       	brmi	.+38     	; 0x9ca <__mulsf3_pse+0x88>
 9a4:	f1 f0       	breq	.+60     	; 0x9e2 <__mulsf3_pse+0xa0>
 9a6:	88 23       	and	r24, r24
 9a8:	4a f0       	brmi	.+18     	; 0x9bc <__mulsf3_pse+0x7a>
 9aa:	ee 0f       	add	r30, r30
 9ac:	ff 1f       	adc	r31, r31
 9ae:	bb 1f       	adc	r27, r27
 9b0:	66 1f       	adc	r22, r22
 9b2:	77 1f       	adc	r23, r23
 9b4:	88 1f       	adc	r24, r24
 9b6:	91 50       	subi	r25, 0x01	; 1
 9b8:	50 40       	sbci	r21, 0x00	; 0
 9ba:	a9 f7       	brne	.-22     	; 0x9a6 <__mulsf3_pse+0x64>
 9bc:	9e 3f       	cpi	r25, 0xFE	; 254
 9be:	51 05       	cpc	r21, r1
 9c0:	80 f0       	brcs	.+32     	; 0x9e2 <__mulsf3_pse+0xa0>
 9c2:	0c 94 3a 04 	jmp	0x874	; 0x874 <__fp_inf>
 9c6:	0c 94 85 04 	jmp	0x90a	; 0x90a <__fp_szero>
 9ca:	5f 3f       	cpi	r21, 0xFF	; 255
 9cc:	e4 f3       	brlt	.-8      	; 0x9c6 <__mulsf3_pse+0x84>
 9ce:	98 3e       	cpi	r25, 0xE8	; 232
 9d0:	d4 f3       	brlt	.-12     	; 0x9c6 <__mulsf3_pse+0x84>
 9d2:	86 95       	lsr	r24
 9d4:	77 95       	ror	r23
 9d6:	67 95       	ror	r22
 9d8:	b7 95       	ror	r27
 9da:	f7 95       	ror	r31
 9dc:	e7 95       	ror	r30
 9de:	9f 5f       	subi	r25, 0xFF	; 255
 9e0:	c1 f7       	brne	.-16     	; 0x9d2 <__mulsf3_pse+0x90>
 9e2:	fe 2b       	or	r31, r30
 9e4:	88 0f       	add	r24, r24
 9e6:	91 1d       	adc	r25, r1
 9e8:	96 95       	lsr	r25
 9ea:	87 95       	ror	r24
 9ec:	97 f9       	bld	r25, 7
 9ee:	08 95       	ret

000009f0 <__divmodhi4>:
 9f0:	97 fb       	bst	r25, 7
 9f2:	07 2e       	mov	r0, r23
 9f4:	16 f4       	brtc	.+4      	; 0x9fa <__divmodhi4+0xa>
 9f6:	00 94       	com	r0
 9f8:	07 d0       	rcall	.+14     	; 0xa08 <__divmodhi4_neg1>
 9fa:	77 fd       	sbrc	r23, 7
 9fc:	09 d0       	rcall	.+18     	; 0xa10 <__divmodhi4_neg2>
 9fe:	0e 94 1b 05 	call	0xa36	; 0xa36 <__udivmodhi4>
 a02:	07 fc       	sbrc	r0, 7
 a04:	05 d0       	rcall	.+10     	; 0xa10 <__divmodhi4_neg2>
 a06:	3e f4       	brtc	.+14     	; 0xa16 <__divmodhi4_exit>

00000a08 <__divmodhi4_neg1>:
 a08:	90 95       	com	r25
 a0a:	81 95       	neg	r24
 a0c:	9f 4f       	sbci	r25, 0xFF	; 255
 a0e:	08 95       	ret

00000a10 <__divmodhi4_neg2>:
 a10:	70 95       	com	r23
 a12:	61 95       	neg	r22
 a14:	7f 4f       	sbci	r23, 0xFF	; 255

00000a16 <__divmodhi4_exit>:
 a16:	08 95       	ret

00000a18 <__umulhisi3>:
 a18:	a2 9f       	mul	r26, r18
 a1a:	b0 01       	movw	r22, r0
 a1c:	b3 9f       	mul	r27, r19
 a1e:	c0 01       	movw	r24, r0
 a20:	a3 9f       	mul	r26, r19
 a22:	70 0d       	add	r23, r0
 a24:	81 1d       	adc	r24, r1
 a26:	11 24       	eor	r1, r1
 a28:	91 1d       	adc	r25, r1
 a2a:	b2 9f       	mul	r27, r18
 a2c:	70 0d       	add	r23, r0
 a2e:	81 1d       	adc	r24, r1
 a30:	11 24       	eor	r1, r1
 a32:	91 1d       	adc	r25, r1
 a34:	08 95       	ret

00000a36 <__udivmodhi4>:
 a36:	aa 1b       	sub	r26, r26
 a38:	bb 1b       	sub	r27, r27
 a3a:	51 e1       	ldi	r21, 0x11	; 17
 a3c:	07 c0       	rjmp	.+14     	; 0xa4c <__udivmodhi4_ep>

00000a3e <__udivmodhi4_loop>:
 a3e:	aa 1f       	adc	r26, r26
 a40:	bb 1f       	adc	r27, r27
 a42:	a6 17       	cp	r26, r22
 a44:	b7 07       	cpc	r27, r23
 a46:	10 f0       	brcs	.+4      	; 0xa4c <__udivmodhi4_ep>
 a48:	a6 1b       	sub	r26, r22
 a4a:	b7 0b       	sbc	r27, r23

00000a4c <__udivmodhi4_ep>:
 a4c:	88 1f       	adc	r24, r24
 a4e:	99 1f       	adc	r25, r25
 a50:	5a 95       	dec	r21
 a52:	a9 f7       	brne	.-22     	; 0xa3e <__udivmodhi4_loop>
 a54:	80 95       	com	r24
 a56:	90 95       	com	r25
 a58:	bc 01       	movw	r22, r24
 a5a:	cd 01       	movw	r24, r26
 a5c:	08 95       	ret

00000a5e <_exit>:
 a5e:	f8 94       	cli

00000a60 <__stop_program>:
 a60:	ff cf       	rjmp	.-2      	; 0xa60 <__stop_program>
